digraph G {
  graph [ ratio = "auto", page = "100", compound =true ];
subgraph "clusterOVM_ECDSAContractAccount" {
  graph [ label = "OVM_ECDSAContractAccount", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_ECDSAContractAccount.execute" [ label = "execute", color = "green" ];
}

subgraph "clusteriOVM_ECDSAContractAccount" {
  graph [ label = "iOVM_ECDSAContractAccount  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_ECDSAContractAccount.execute" [ label = "execute", color = "blue" ];
}

subgraph "clusterLib_OVMCodec" {
  graph [ label = "Lib_OVMCodec  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_OVMCodec.decodeEIP155Transaction" [ label = "decodeEIP155Transaction", color = "white" ];
  "Lib_OVMCodec.decompressEIP155Transaction" [ label = "decompressEIP155Transaction", color = "white" ];
  "Lib_OVMCodec.encodeEIP155Transaction" [ label = "encodeEIP155Transaction", color = "white" ];
  "Lib_OVMCodec.encodeTransaction" [ label = "encodeTransaction" ];
  "Lib_OVMCodec.hashTransaction" [ label = "hashTransaction", color = "white" ];
  "Lib_OVMCodec.toEVMAccount" [ label = "toEVMAccount" ];
  "Lib_OVMCodec.encodeEVMAccount" [ label = "encodeEVMAccount", color = "white" ];
  "Lib_OVMCodec.decodeEVMAccount" [ label = "decodeEVMAccount", color = "white" ];
  "Lib_OVMCodec.hashBatchHeader" [ label = "hashBatchHeader" ];
  "Lib_OVMCodec.QueueElement" [ label = "QueueElement" ];
  "Lib_OVMCodec.TransactionChainElement" [ label = "TransactionChainElement" ];
  "Lib_OVMCodec.ChainBatchHeader" [ label = "ChainBatchHeader" ];
  "Lib_OVMCodec.Account" [ label = "Account" ];
}

subgraph "clusterLib_RLPReader" {
  graph [ label = "Lib_RLPReader  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_RLPReader.readList" [ label = "readList", color = "white" ];
  "Lib_RLPReader.readUint256" [ label = "readUint256", color = "white" ];
  "Lib_RLPReader.readAddress" [ label = "readAddress", color = "white" ];
  "Lib_RLPReader.readBytes" [ label = "readBytes", color = "white" ];
  "Lib_RLPReader.readBytes32" [ label = "readBytes32", color = "white" ];
  "Lib_RLPReader.toRLPItem" [ label = "toRLPItem" ];
  "Lib_RLPReader.readString" [ label = "readString", color = "white" ];
  "Lib_RLPReader.readBool" [ label = "readBool" ];
  "Lib_RLPReader.readRawBytes" [ label = "readRawBytes", color = "white" ];
  "Lib_RLPReader._decodeLength" [ label = "_decodeLength" ];
  "Lib_RLPReader._copy" [ label = "_copy" ];
}

subgraph "clusterLib_RLPWriter" {
  graph [ label = "Lib_RLPWriter  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_RLPWriter.writeUint" [ label = "writeUint", color = "white" ];
  "Lib_RLPWriter.writeBytes" [ label = "writeBytes", color = "white" ];
  "Lib_RLPWriter.writeAddress" [ label = "writeAddress", color = "white" ];
  "Lib_RLPWriter.writeList" [ label = "writeList", color = "white" ];
  "Lib_RLPWriter.writeString" [ label = "writeString", color = "white" ];
  "Lib_RLPWriter.writeBool" [ label = "writeBool", color = "white" ];
  "Lib_RLPWriter._writeLength" [ label = "_writeLength" ];
  "Lib_RLPWriter._toBinary" [ label = "_toBinary" ];
  "Lib_RLPWriter._memcpy" [ label = "_memcpy" ];
  "Lib_RLPWriter._flatten" [ label = "_flatten" ];
}

subgraph "clusterLib_BytesUtils" {
  graph [ label = "Lib_BytesUtils  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_BytesUtils.toUint24" [ label = "toUint24", color = "white" ];
  "Lib_BytesUtils.toAddress" [ label = "toAddress", color = "white" ];
  "Lib_BytesUtils.slice" [ label = "slice", color = "white" ];
  "Lib_BytesUtils.concat" [ label = "concat", color = "white" ];
  "Lib_BytesUtils.toBytes32PadLeft" [ label = "toBytes32PadLeft" ];
  "Lib_BytesUtils.toBytes32" [ label = "toBytes32" ];
  "Lib_BytesUtils.toUint256" [ label = "toUint256", color = "white" ];
  "Lib_BytesUtils.toUint8" [ label = "toUint8" ];
  "Lib_BytesUtils.toNibbles" [ label = "toNibbles" ];
  "Lib_BytesUtils.fromNibbles" [ label = "fromNibbles" ];
  "Lib_BytesUtils.equal" [ label = "equal" ];
}

subgraph "clusterLib_Bytes32Utils" {
  graph [ label = "Lib_Bytes32Utils  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_Bytes32Utils.removeLeadingZeros" [ label = "removeLeadingZeros", color = "white" ];
  "Lib_Bytes32Utils.toBool" [ label = "toBool" ];
  "Lib_Bytes32Utils.fromBool" [ label = "fromBool" ];
  "Lib_Bytes32Utils.toAddress" [ label = "toAddress" ];
  "Lib_Bytes32Utils.fromAddress" [ label = "fromAddress" ];
}

subgraph "clusterLib_SafeExecutionManagerWrapper" {
  graph [ label = "Lib_SafeExecutionManagerWrapper  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ label = "safeREQUIRE", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeADDRESS" [ label = "safeADDRESS", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeCHAINID" [ label = "safeCHAINID", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeGETNONCE" [ label = "safeGETNONCE", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeCALLER" [ label = "safeCALLER", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeCALL" [ label = "safeCALL", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeCREATE" [ label = "safeCREATE", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeSETNONCE" [ label = "safeSETNONCE", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeDELEGATECALL" [ label = "safeDELEGATECALL", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeEXTCODESIZE" [ label = "safeEXTCODESIZE", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeCREATEEOA" [ label = "safeCREATEEOA", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeREVERT" [ label = "safeREVERT", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeSLOAD" [ label = "safeSLOAD", color = "white" ];
  "Lib_SafeExecutionManagerWrapper.safeSSTORE" [ label = "safeSSTORE", color = "white" ];
  "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ label = "_safeExecutionManagerInteraction" ];
}

subgraph "clusterLib_ECDSAUtils" {
  graph [ label = "Lib_ECDSAUtils  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_ECDSAUtils.recover" [ label = "recover", color = "white" ];
  "Lib_ECDSAUtils.getMessageHash" [ label = "getMessageHash" ];
  "Lib_ECDSAUtils.getNativeMessageHash" [ label = "getNativeMessageHash" ];
  "Lib_ECDSAUtils.getEthSignedMessageHash" [ label = "getEthSignedMessageHash" ];
}

subgraph "clusterLib_SafeMathWrapper" {
  graph [ label = "Lib_SafeMathWrapper  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_SafeMathWrapper.add" [ label = "add", color = "white" ];
  "Lib_SafeMathWrapper.sub" [ label = "sub" ];
  "Lib_SafeMathWrapper.mul" [ label = "mul", color = "white" ];
  "Lib_SafeMathWrapper.div" [ label = "div" ];
  "Lib_SafeMathWrapper.mod" [ label = "mod" ];
}

subgraph "clusterOVM_ProxyEOA" {
  graph [ label = "OVM_ProxyEOA", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_ProxyEOA.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_ProxyEOA.<Fallback>" [ label = "<Fallback>", color = "blue" ];
  "OVM_ProxyEOA.upgrade" [ label = "upgrade", color = "blue" ];
  "OVM_ProxyEOA.getImplementation" [ label = "getImplementation" ];
  "OVM_ProxyEOA._setImplementation" [ label = "_setImplementation" ];
}

subgraph "clusterOVM_BaseCrossDomainMessenger" {
  graph [ label = "OVM_BaseCrossDomainMessenger", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_BaseCrossDomainMessenger.<Constructor>" [ label = "<Constructor>", color = "white" ];
  "OVM_BaseCrossDomainMessenger.sendMessage" [ label = "sendMessage", color = "green" ];
  "OVM_BaseCrossDomainMessenger._getXDomainCalldata" [ label = "_getXDomainCalldata" ];
  "OVM_BaseCrossDomainMessenger._sendXDomainMessage" [ label = "_sendXDomainMessage" ];
}

subgraph "clusteriOVM_BaseCrossDomainMessenger" {
  graph [ label = "iOVM_BaseCrossDomainMessenger  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_BaseCrossDomainMessenger.xDomainMessageSender" [ label = "xDomainMessageSender", color = "blue" ];
  "iOVM_BaseCrossDomainMessenger.sendMessage" [ label = "sendMessage", color = "blue" ];
}

subgraph "clusterLib_ReentrancyGuard" {
  graph [ label = "Lib_ReentrancyGuard", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_ReentrancyGuard.<Constructor>" [ label = "<Constructor>", color = "white" ];
  "Lib_ReentrancyGuard.nonReentrant" [ label = "nonReentrant", color = "yellow" ];
}

subgraph "clusterOVM_L1CrossDomainMessenger" {
  graph [ label = "OVM_L1CrossDomainMessenger", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_L1CrossDomainMessenger.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_L1CrossDomainMessenger.initialize" [ label = "initialize", color = "green" ];
  "OVM_L1CrossDomainMessenger.onlyRelayer" [ label = "onlyRelayer", color = "yellow" ];
  "OVM_L1CrossDomainMessenger.relayMessage" [ label = "relayMessage", color = "green" ];
  "OVM_L1CrossDomainMessenger.replayMessage" [ label = "replayMessage", color = "green" ];
  "OVM_L1CrossDomainMessenger._verifyXDomainMessage" [ label = "_verifyXDomainMessage" ];
  "OVM_L1CrossDomainMessenger._verifyStateRootProof" [ label = "_verifyStateRootProof" ];
  "OVM_L1CrossDomainMessenger._verifyStorageProof" [ label = "_verifyStorageProof" ];
  "OVM_BaseCrossDomainMessenger._sendXDomainMessage" [ label = "_sendXDomainMessage", color = "white" ];
  "OVM_L1CrossDomainMessenger.resolve" [ label = "resolve" ];
}

subgraph "clusterLib_AddressResolver" {
  graph [ label = "Lib_AddressResolver", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_AddressResolver.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "Lib_AddressResolver.resolve" [ label = "resolve", color = "green" ];
}

subgraph "clusterLib_AddressManager" {
  graph [ label = "Lib_AddressManager", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_AddressManager.getAddress" [ label = "getAddress", color = "green" ];
  "Lib_AddressManager.setAddress" [ label = "setAddress", color = "green" ];
  "Lib_AddressManager._getNameHash" [ label = "_getNameHash" ];
}

subgraph "clusterOwnable" {
  graph [ label = "Ownable", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Ownable.<Constructor>" [ label = "<Constructor>", color = "white" ];
  "Ownable.onlyOwner" [ label = "onlyOwner", color = "yellow" ];
  "Ownable.renounceOwnership" [ label = "renounceOwnership", color = "green" ];
  "Ownable.transferOwnership" [ label = "transferOwnership", color = "green" ];
}

subgraph "clusterLib_SecureMerkleTrie" {
  graph [ label = "Lib_SecureMerkleTrie  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_SecureMerkleTrie.get" [ label = "get", color = "white" ];
  "Lib_SecureMerkleTrie.verifyInclusionProof" [ label = "verifyInclusionProof", color = "white" ];
  "Lib_SecureMerkleTrie.verifyExclusionProof" [ label = "verifyExclusionProof", color = "white" ];
  "Lib_SecureMerkleTrie.update" [ label = "update", color = "white" ];
  "Lib_SecureMerkleTrie.getSingleNodeRootHash" [ label = "getSingleNodeRootHash", color = "white" ];
  "Lib_SecureMerkleTrie._getSecureKey" [ label = "_getSecureKey" ];
}

subgraph "clusterLib_MerkleTrie" {
  graph [ label = "Lib_MerkleTrie  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_MerkleTrie.verifyInclusionProof" [ label = "verifyInclusionProof", color = "white" ];
  "Lib_MerkleTrie.verifyExclusionProof" [ label = "verifyExclusionProof", color = "white" ];
  "Lib_MerkleTrie.update" [ label = "update", color = "white" ];
  "Lib_MerkleTrie.get" [ label = "get", color = "white" ];
  "Lib_MerkleTrie.getSingleNodeRootHash" [ label = "getSingleNodeRootHash", color = "white" ];
  "Lib_MerkleTrie._walkNodePath" [ label = "_walkNodePath" ];
  "Lib_MerkleTrie._getNewPath" [ label = "_getNewPath" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" [ label = "_getUpdatedTrieRoot" ];
  "Lib_MerkleTrie._parseProof" [ label = "_parseProof" ];
  "Lib_MerkleTrie._getNodeID" [ label = "_getNodeID" ];
  "Lib_MerkleTrie._getNodePath" [ label = "_getNodePath" ];
  "Lib_MerkleTrie._getNodeKey" [ label = "_getNodeKey" ];
  "Lib_MerkleTrie._getNodeValue" [ label = "_getNodeValue" ];
  "Lib_MerkleTrie._getNodeHash" [ label = "_getNodeHash" ];
  "Lib_MerkleTrie._getNodeType" [ label = "_getNodeType" ];
  "Lib_MerkleTrie._getSharedNibbleLength" [ label = "_getSharedNibbleLength" ];
  "Lib_MerkleTrie._makeNode" [ label = "_makeNode", color = "red" ];
  "Lib_MerkleTrie._makeExtensionNode" [ label = "_makeExtensionNode" ];
  "Lib_MerkleTrie._makeLeafNode" [ label = "_makeLeafNode" ];
  "Lib_MerkleTrie._makeEmptyBranchNode" [ label = "_makeEmptyBranchNode" ];
  "Lib_MerkleTrie._editBranchValue" [ label = "_editBranchValue" ];
  "Lib_MerkleTrie._editBranchIndex" [ label = "_editBranchIndex" ];
  "Lib_MerkleTrie._addHexPrefix" [ label = "_addHexPrefix" ];
  "Lib_MerkleTrie._removeHexPrefix" [ label = "_removeHexPrefix" ];
  "Lib_MerkleTrie._joinNodeArrays" [ label = "_joinNodeArrays" ];
}

subgraph "clusteriOVM_L1CrossDomainMessenger" {
  graph [ label = "iOVM_L1CrossDomainMessenger  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_L1CrossDomainMessenger.relayMessage" [ label = "relayMessage", color = "blue" ];
  "iOVM_L1CrossDomainMessenger.replayMessage" [ label = "replayMessage", color = "blue" ];
}

subgraph "clusteriOVM_CanonicalTransactionChain" {
  graph [ label = "iOVM_CanonicalTransactionChain  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_CanonicalTransactionChain.getTotalElements" [ label = "getTotalElements", color = "blue" ];
  "iOVM_CanonicalTransactionChain.getTotalBatches" [ label = "getTotalBatches", color = "blue" ];
  "iOVM_CanonicalTransactionChain.getNextQueueIndex" [ label = "getNextQueueIndex", color = "blue" ];
  "iOVM_CanonicalTransactionChain.getNumPendingQueueElements" [ label = "getNumPendingQueueElements", color = "blue" ];
  "iOVM_CanonicalTransactionChain.getQueueLength" [ label = "getQueueLength", color = "blue" ];
  "iOVM_CanonicalTransactionChain.getQueueElement" [ label = "getQueueElement", color = "blue" ];
  "iOVM_CanonicalTransactionChain.enqueue" [ label = "enqueue", color = "blue" ];
  "iOVM_CanonicalTransactionChain.appendQueueBatch" [ label = "appendQueueBatch", color = "blue" ];
  "iOVM_CanonicalTransactionChain.appendSequencerBatch" [ label = "appendSequencerBatch", color = "blue" ];
  "iOVM_CanonicalTransactionChain.verifyTransaction" [ label = "verifyTransaction" ];
}

subgraph "clusteriOVM_StateCommitmentChain" {
  graph [ label = "iOVM_StateCommitmentChain  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_StateCommitmentChain.insideFraudProofWindow" [ label = "insideFraudProofWindow", color = "blue" ];
  "iOVM_StateCommitmentChain.verifyStateCommitment" [ label = "verifyStateCommitment", color = "blue" ];
  "iOVM_StateCommitmentChain.getTotalElements" [ label = "getTotalElements", color = "blue" ];
  "iOVM_StateCommitmentChain.getTotalBatches" [ label = "getTotalBatches", color = "blue" ];
  "iOVM_StateCommitmentChain.getLastSequencerTimestamp" [ label = "getLastSequencerTimestamp", color = "blue" ];
  "iOVM_StateCommitmentChain.appendStateBatch" [ label = "appendStateBatch", color = "blue" ];
  "iOVM_StateCommitmentChain.deleteStateBatch" [ label = "deleteStateBatch" ];
}

subgraph "clusterOVM_L2CrossDomainMessenger" {
  graph [ label = "OVM_L2CrossDomainMessenger", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_L2CrossDomainMessenger.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_L2CrossDomainMessenger.relayMessage" [ label = "relayMessage", color = "green" ];
  "OVM_L2CrossDomainMessenger._verifyXDomainMessage" [ label = "_verifyXDomainMessage" ];
  "OVM_BaseCrossDomainMessenger._sendXDomainMessage" [ label = "_sendXDomainMessage", color = "white" ];
}

subgraph "clusteriOVM_L2CrossDomainMessenger" {
  graph [ label = "iOVM_L2CrossDomainMessenger  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_L2CrossDomainMessenger.relayMessage" [ label = "relayMessage", color = "blue" ];
}

subgraph "clusteriOVM_L1MessageSender" {
  graph [ label = "iOVM_L1MessageSender  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_L1MessageSender.getL1MessageSender" [ label = "getL1MessageSender", color = "blue" ];
}

subgraph "clusteriOVM_L2ToL1MessagePasser" {
  graph [ label = "iOVM_L2ToL1MessagePasser  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_L2ToL1MessagePasser.passMessageToL1" [ label = "passMessageToL1", color = "blue" ];
}

subgraph "clusterOVM_CanonicalTransactionChain" {
  graph [ label = "OVM_CanonicalTransactionChain", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_CanonicalTransactionChain.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_CanonicalTransactionChain.batches" [ label = "batches", color = "green" ];
  "OVM_CanonicalTransactionChain.queue" [ label = "queue", color = "green" ];
  "OVM_CanonicalTransactionChain.getTotalElements" [ label = "getTotalElements", color = "green" ];
  "OVM_CanonicalTransactionChain.getTotalBatches" [ label = "getTotalBatches", color = "green" ];
  "OVM_CanonicalTransactionChain.getNextQueueIndex" [ label = "getNextQueueIndex", color = "green" ];
  "OVM_CanonicalTransactionChain.getQueueElement" [ label = "getQueueElement", color = "green" ];
  "OVM_CanonicalTransactionChain.getNumPendingQueueElements" [ label = "getNumPendingQueueElements", color = "green" ];
  "OVM_CanonicalTransactionChain.getQueueLength" [ label = "getQueueLength" ];
  "OVM_CanonicalTransactionChain.enqueue" [ label = "enqueue", color = "green" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" [ label = "appendQueueBatch", color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" [ label = "appendSequencerBatch", color = "green" ];
  "OVM_CanonicalTransactionChain.verifyTransaction" [ label = "verifyTransaction", color = "green" ];
  "OVM_CanonicalTransactionChain._getBatchContext" [ label = "_getBatchContext" ];
  "OVM_CanonicalTransactionChain._getBatchExtraData" [ label = "_getBatchExtraData" ];
  "OVM_CanonicalTransactionChain._makeBatchExtraData" [ label = "_makeBatchExtraData" ];
  "OVM_CanonicalTransactionChain._getQueueLeafHash" [ label = "_getQueueLeafHash" ];
  "OVM_CanonicalTransactionChain._getQueueLength" [ label = "_getQueueLength", color = "white" ];
  "OVM_CanonicalTransactionChain._getSequencerLeafHash" [ label = "_getSequencerLeafHash" ];
  "OVM_CanonicalTransactionChain._appendBatch" [ label = "_appendBatch" ];
  "OVM_CanonicalTransactionChain._validateFirstBatchContext" [ label = "_validateFirstBatchContext" ];
  "OVM_CanonicalTransactionChain._validateNextBatchContext" [ label = "_validateNextBatchContext" ];
  "OVM_CanonicalTransactionChain._validateFinalBatchContext" [ label = "_validateFinalBatchContext" ];
  "OVM_CanonicalTransactionChain._hashTransactionChainElement" [ label = "_hashTransactionChainElement" ];
  "OVM_CanonicalTransactionChain._verifySequencerTransaction" [ label = "_verifySequencerTransaction" ];
  "OVM_CanonicalTransactionChain._verifyQueueTransaction" [ label = "_verifyQueueTransaction" ];
  "OVM_CanonicalTransactionChain._verifyElement" [ label = "_verifyElement" ];
}

subgraph "clusterLib_MerkleTree" {
  graph [ label = "Lib_MerkleTree  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_MerkleTree.getMerkleRoot" [ label = "getMerkleRoot", color = "white" ];
  "Lib_MerkleTree.verify" [ label = "verify", color = "white" ];
  "Lib_MerkleTree._ceilLog2" [ label = "_ceilLog2" ];
}

subgraph "clusterLib_Math" {
  graph [ label = "Lib_Math  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_Math.min" [ label = "min", color = "white" ];
}

subgraph "clusteriOVM_ChainStorageContainer" {
  graph [ label = "iOVM_ChainStorageContainer  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_ChainStorageContainer.setGlobalMetadata" [ label = "setGlobalMetadata", color = "blue" ];
  "iOVM_ChainStorageContainer.getGlobalMetadata" [ label = "getGlobalMetadata", color = "blue" ];
  "iOVM_ChainStorageContainer.length" [ label = "length", color = "blue" ];
  "iOVM_ChainStorageContainer.push" [ label = "push", color = "blue" ];
  "iOVM_ChainStorageContainer.push2" [ label = "push2", color = "blue" ];
  "iOVM_ChainStorageContainer.get" [ label = "get", color = "blue" ];
  "iOVM_ChainStorageContainer.deleteElementsAfterInclusive" [ label = "deleteElementsAfterInclusive", color = "blue" ];
  "iOVM_ChainStorageContainer.setNextOverwritableIndex" [ label = "setNextOverwritableIndex", color = "blue" ];
}

subgraph "clusterOVM_ExecutionManager" {
  graph [ label = "OVM_ExecutionManager", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_ExecutionManager.getMaxTransactionGasLimit" [ label = "getMaxTransactionGasLimit", color = "blue" ];
  "OVM_ExecutionManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_ExecutionManager.netGasCost" [ label = "netGasCost", color = "yellow" ];
  "OVM_ExecutionManager.fixedGasDiscount" [ label = "fixedGasDiscount", color = "yellow" ];
  "OVM_ExecutionManager.notStatic" [ label = "notStatic", color = "yellow" ];
  "OVM_ExecutionManager.run" [ label = "run", color = "green" ];
  "OVM_ExecutionManager.ovmCALLER" [ label = "ovmCALLER", color = "green" ];
  "OVM_ExecutionManager.ovmADDRESS" [ label = "ovmADDRESS" ];
  "OVM_ExecutionManager.ovmTIMESTAMP" [ label = "ovmTIMESTAMP", color = "green" ];
  "OVM_ExecutionManager.ovmNUMBER" [ label = "ovmNUMBER", color = "green" ];
  "OVM_ExecutionManager.ovmGASLIMIT" [ label = "ovmGASLIMIT", color = "green" ];
  "OVM_ExecutionManager.ovmCHAINID" [ label = "ovmCHAINID", color = "green" ];
  "OVM_ExecutionManager.ovmL1QUEUEORIGIN" [ label = "ovmL1QUEUEORIGIN", color = "green" ];
  "OVM_ExecutionManager.ovmL1TXORIGIN" [ label = "ovmL1TXORIGIN", color = "green" ];
  "OVM_ExecutionManager.ovmREVERT" [ label = "ovmREVERT", color = "green" ];
  "OVM_ExecutionManager.ovmCREATE" [ label = "ovmCREATE", color = "green" ];
  "OVM_ExecutionManager.ovmCREATE2" [ label = "ovmCREATE2", color = "green" ];
  "OVM_ExecutionManager.ovmGETNONCE" [ label = "ovmGETNONCE", color = "green" ];
  "OVM_ExecutionManager.ovmSETNONCE" [ label = "ovmSETNONCE", color = "green" ];
  "OVM_ExecutionManager.ovmCREATEEOA" [ label = "ovmCREATEEOA", color = "green" ];
  "OVM_ExecutionManager.ovmCALL" [ label = "ovmCALL" ];
  "OVM_ExecutionManager.ovmSTATICCALL" [ label = "ovmSTATICCALL", color = "green" ];
  "OVM_ExecutionManager.ovmDELEGATECALL" [ label = "ovmDELEGATECALL", color = "green" ];
  "OVM_ExecutionManager.ovmSLOAD" [ label = "ovmSLOAD", color = "green" ];
  "OVM_ExecutionManager.ovmSSTORE" [ label = "ovmSSTORE", color = "green" ];
  "OVM_ExecutionManager.ovmEXTCODECOPY" [ label = "ovmEXTCODECOPY", color = "green" ];
  "OVM_ExecutionManager.ovmEXTCODESIZE" [ label = "ovmEXTCODESIZE", color = "green" ];
  "OVM_ExecutionManager.ovmEXTCODEHASH" [ label = "ovmEXTCODEHASH", color = "green" ];
  "OVM_ExecutionManager.safeCREATE" [ label = "safeCREATE", color = "green" ];
  "OVM_ExecutionManager._checkDeployerAllowed" [ label = "_checkDeployerAllowed" ];
  "OVM_ExecutionManager._createContract" [ label = "_createContract" ];
  "OVM_ExecutionManager._callContract" [ label = "_callContract" ];
  "OVM_ExecutionManager._handleExternalInteraction" [ label = "_handleExternalInteraction" ];
  "OVM_ExecutionManager._hasAccount" [ label = "_hasAccount", color = "white" ];
  "OVM_ExecutionManager._hasEmptyAccount" [ label = "_hasEmptyAccount" ];
  "OVM_ExecutionManager._setAccountNonce" [ label = "_setAccountNonce" ];
  "OVM_ExecutionManager._getAccountNonce" [ label = "_getAccountNonce" ];
  "OVM_ExecutionManager._getAccountEthAddress" [ label = "_getAccountEthAddress" ];
  "OVM_ExecutionManager._initPendingAccount" [ label = "_initPendingAccount" ];
  "OVM_ExecutionManager._commitPendingAccount" [ label = "_commitPendingAccount" ];
  "OVM_ExecutionManager._getContractStorage" [ label = "_getContractStorage" ];
  "OVM_ExecutionManager._putContractStorage" [ label = "_putContractStorage" ];
  "OVM_ExecutionManager._checkAccountLoad" [ label = "_checkAccountLoad" ];
  "OVM_ExecutionManager._checkAccountChange" [ label = "_checkAccountChange" ];
  "OVM_ExecutionManager._checkContractStorageLoad" [ label = "_checkContractStorageLoad" ];
  "OVM_ExecutionManager._checkContractStorageChange" [ label = "_checkContractStorageChange" ];
  "OVM_ExecutionManager._encodeRevertData" [ label = "_encodeRevertData" ];
  "OVM_ExecutionManager._decodeRevertData" [ label = "_decodeRevertData" ];
  "OVM_ExecutionManager._revertWithFlag" [ label = "_revertWithFlag" ];
  "OVM_ExecutionManager._getNuisanceGasLimit" [ label = "_getNuisanceGasLimit" ];
  "OVM_ExecutionManager._useNuisanceGas" [ label = "_useNuisanceGas" ];
  "OVM_ExecutionManager._checkNeedsNewEpoch" [ label = "_checkNeedsNewEpoch", color = "white" ];
  "OVM_ExecutionManager._isValidGasLimit" [ label = "_isValidGasLimit" ];
  "OVM_ExecutionManager._updateCumulativeGas" [ label = "_updateCumulativeGas", color = "white" ];
  "OVM_ExecutionManager._getGasMetadata" [ label = "_getGasMetadata" ];
  "OVM_ExecutionManager._putGasMetadata" [ label = "_putGasMetadata" ];
  "OVM_ExecutionManager._switchMessageContext" [ label = "_switchMessageContext" ];
  "OVM_ExecutionManager._initContext" [ label = "_initContext" ];
  "OVM_ExecutionManager._resetContext" [ label = "_resetContext" ];
}

subgraph "clusterLib_EthUtils" {
  graph [ label = "Lib_EthUtils  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_EthUtils.getAddressForCREATE" [ label = "getAddressForCREATE", color = "white" ];
  "Lib_EthUtils.getAddressForCREATE2" [ label = "getAddressForCREATE2", color = "white" ];
  "Lib_EthUtils.getCode" [ label = "getCode", color = "white" ];
  "Lib_EthUtils.getCodeSize" [ label = "getCodeSize", color = "white" ];
  "Lib_EthUtils.getCodeHash" [ label = "getCodeHash", color = "white" ];
  "Lib_EthUtils.createContract" [ label = "createContract", color = "white" ];
}

subgraph "clusteriOVM_ExecutionManager" {
  graph [ label = "iOVM_ExecutionManager  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_ExecutionManager.run" [ label = "run" ];
  "iOVM_ExecutionManager.ovmCALLER" [ label = "ovmCALLER", color = "blue" ];
  "iOVM_ExecutionManager.ovmADDRESS" [ label = "ovmADDRESS", color = "blue" ];
  "iOVM_ExecutionManager.ovmTIMESTAMP" [ label = "ovmTIMESTAMP", color = "blue" ];
  "iOVM_ExecutionManager.ovmNUMBER" [ label = "ovmNUMBER", color = "blue" ];
  "iOVM_ExecutionManager.ovmGASLIMIT" [ label = "ovmGASLIMIT", color = "blue" ];
  "iOVM_ExecutionManager.ovmCHAINID" [ label = "ovmCHAINID", color = "blue" ];
  "iOVM_ExecutionManager.ovmL1QUEUEORIGIN" [ label = "ovmL1QUEUEORIGIN", color = "blue" ];
  "iOVM_ExecutionManager.ovmL1TXORIGIN" [ label = "ovmL1TXORIGIN", color = "blue" ];
  "iOVM_ExecutionManager.ovmREVERT" [ label = "ovmREVERT", color = "blue" ];
  "iOVM_ExecutionManager.ovmCREATE" [ label = "ovmCREATE", color = "blue" ];
  "iOVM_ExecutionManager.ovmCREATE2" [ label = "ovmCREATE2", color = "blue" ];
  "iOVM_ExecutionManager.ovmGETNONCE" [ label = "ovmGETNONCE", color = "blue" ];
  "iOVM_ExecutionManager.ovmSETNONCE" [ label = "ovmSETNONCE", color = "blue" ];
  "iOVM_ExecutionManager.ovmCREATEEOA" [ label = "ovmCREATEEOA", color = "blue" ];
  "iOVM_ExecutionManager.ovmCALL" [ label = "ovmCALL", color = "blue" ];
  "iOVM_ExecutionManager.ovmSTATICCALL" [ label = "ovmSTATICCALL", color = "blue" ];
  "iOVM_ExecutionManager.ovmDELEGATECALL" [ label = "ovmDELEGATECALL", color = "blue" ];
  "iOVM_ExecutionManager.ovmSLOAD" [ label = "ovmSLOAD", color = "blue" ];
  "iOVM_ExecutionManager.ovmSSTORE" [ label = "ovmSSTORE", color = "blue" ];
  "iOVM_ExecutionManager.ovmEXTCODECOPY" [ label = "ovmEXTCODECOPY", color = "blue" ];
  "iOVM_ExecutionManager.ovmEXTCODESIZE" [ label = "ovmEXTCODESIZE", color = "blue" ];
  "iOVM_ExecutionManager.ovmEXTCODEHASH" [ label = "ovmEXTCODEHASH", color = "blue" ];
  "iOVM_ExecutionManager.safeCREATE" [ label = "safeCREATE", color = "blue" ];
  "iOVM_ExecutionManager.getMaxTransactionGasLimit" [ label = "getMaxTransactionGasLimit", color = "blue" ];
}

subgraph "clusteriOVM_StateManager" {
  graph [ label = "iOVM_StateManager  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_StateManager.isAuthenticated" [ label = "isAuthenticated", color = "blue" ];
  "iOVM_StateManager.hasAccount" [ label = "hasAccount", color = "blue" ];
  "iOVM_StateManager.hasEmptyAccount" [ label = "hasEmptyAccount", color = "blue" ];
  "iOVM_StateManager.setAccountNonce" [ label = "setAccountNonce", color = "blue" ];
  "iOVM_StateManager.getAccountNonce" [ label = "getAccountNonce", color = "blue" ];
  "iOVM_StateManager.getAccountEthAddress" [ label = "getAccountEthAddress", color = "blue" ];
  "iOVM_StateManager.initPendingAccount" [ label = "initPendingAccount", color = "blue" ];
  "iOVM_StateManager.commitPendingAccount" [ label = "commitPendingAccount", color = "blue" ];
  "iOVM_StateManager.getContractStorage" [ label = "getContractStorage", color = "blue" ];
  "iOVM_StateManager.putContractStorage" [ label = "putContractStorage", color = "blue" ];
  "iOVM_StateManager.testAndSetAccountLoaded" [ label = "testAndSetAccountLoaded", color = "blue" ];
  "iOVM_StateManager.testAndSetAccountChanged" [ label = "testAndSetAccountChanged", color = "blue" ];
  "iOVM_StateManager.incrementTotalUncommittedAccounts" [ label = "incrementTotalUncommittedAccounts", color = "blue" ];
  "iOVM_StateManager.hasContractStorage" [ label = "hasContractStorage", color = "blue" ];
  "iOVM_StateManager.testAndSetContractStorageLoaded" [ label = "testAndSetContractStorageLoaded", color = "blue" ];
  "iOVM_StateManager.testAndSetContractStorageChanged" [ label = "testAndSetContractStorageChanged", color = "blue" ];
  "iOVM_StateManager.incrementTotalUncommittedContractStorage" [ label = "incrementTotalUncommittedContractStorage", color = "blue" ];
  "iOVM_StateManager.owner" [ label = "owner", color = "blue" ];
  "iOVM_StateManager.ovmExecutionManager" [ label = "ovmExecutionManager", color = "blue" ];
  "iOVM_StateManager.setExecutionManager" [ label = "setExecutionManager" ];
  "iOVM_StateManager.putAccount" [ label = "putAccount" ];
  "iOVM_StateManager.putEmptyAccount" [ label = "putEmptyAccount" ];
  "iOVM_StateManager.getAccount" [ label = "getAccount" ];
  "iOVM_StateManager.getAccountStorageRoot" [ label = "getAccountStorageRoot" ];
  "iOVM_StateManager.commitAccount" [ label = "commitAccount" ];
  "iOVM_StateManager.getTotalUncommittedAccounts" [ label = "getTotalUncommittedAccounts" ];
  "iOVM_StateManager.wasAccountChanged" [ label = "wasAccountChanged", color = "blue" ];
  "iOVM_StateManager.wasAccountCommitted" [ label = "wasAccountCommitted", color = "blue" ];
  "iOVM_StateManager.commitContractStorage" [ label = "commitContractStorage" ];
  "iOVM_StateManager.getTotalUncommittedContractStorage" [ label = "getTotalUncommittedContractStorage" ];
  "iOVM_StateManager.wasContractStorageChanged" [ label = "wasContractStorageChanged", color = "blue" ];
  "iOVM_StateManager.wasContractStorageCommitted" [ label = "wasContractStorageCommitted", color = "blue" ];
}

subgraph "clusteriOVM_SafetyChecker" {
  graph [ label = "iOVM_SafetyChecker  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_SafetyChecker.isBytecodeSafe" [ label = "isBytecodeSafe", color = "blue" ];
}

subgraph "clusterOVM_DeployerWhitelist" {
  graph [ label = "OVM_DeployerWhitelist", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_DeployerWhitelist.onlyOwner" [ label = "onlyOwner", color = "yellow" ];
  "OVM_DeployerWhitelist.initialize" [ label = "initialize", color = "green" ];
  "OVM_DeployerWhitelist.getOwner" [ label = "getOwner", color = "green" ];
  "OVM_DeployerWhitelist.setWhitelistedDeployer" [ label = "setWhitelistedDeployer", color = "green" ];
  "OVM_DeployerWhitelist.setOwner" [ label = "setOwner", color = "green" ];
  "OVM_DeployerWhitelist.setAllowArbitraryDeployment" [ label = "setAllowArbitraryDeployment", color = "green" ];
  "OVM_DeployerWhitelist.enableArbitraryContractDeployment" [ label = "enableArbitraryContractDeployment", color = "green" ];
  "OVM_DeployerWhitelist.isDeployerAllowed" [ label = "isDeployerAllowed", color = "green" ];
}

subgraph "clusteriOVM_DeployerWhitelist" {
  graph [ label = "iOVM_DeployerWhitelist  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_DeployerWhitelist.initialize" [ label = "initialize", color = "blue" ];
  "iOVM_DeployerWhitelist.getOwner" [ label = "getOwner", color = "blue" ];
  "iOVM_DeployerWhitelist.setWhitelistedDeployer" [ label = "setWhitelistedDeployer", color = "blue" ];
  "iOVM_DeployerWhitelist.setOwner" [ label = "setOwner", color = "blue" ];
  "iOVM_DeployerWhitelist.setAllowArbitraryDeployment" [ label = "setAllowArbitraryDeployment", color = "blue" ];
  "iOVM_DeployerWhitelist.enableArbitraryContractDeployment" [ label = "enableArbitraryContractDeployment", color = "blue" ];
  "iOVM_DeployerWhitelist.isDeployerAllowed" [ label = "isDeployerAllowed", color = "blue" ];
}

subgraph "clusterOVM_ChainStorageContainer" {
  graph [ label = "OVM_ChainStorageContainer", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_ChainStorageContainer.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_ChainStorageContainer.onlyOwner" [ label = "onlyOwner", color = "yellow" ];
  "OVM_ChainStorageContainer.setGlobalMetadata" [ label = "setGlobalMetadata", color = "green" ];
  "OVM_ChainStorageContainer.getGlobalMetadata" [ label = "getGlobalMetadata", color = "green" ];
  "OVM_ChainStorageContainer.length" [ label = "length", color = "green" ];
  "OVM_ChainStorageContainer.push" [ label = "push", color = "green" ];
  "OVM_ChainStorageContainer.push2" [ label = "push2", color = "green" ];
  "OVM_ChainStorageContainer.get" [ label = "get", color = "green" ];
  "OVM_ChainStorageContainer.deleteElementsAfterInclusive" [ label = "deleteElementsAfterInclusive", color = "green" ];
  "OVM_ChainStorageContainer.setNextOverwritableIndex" [ label = "setNextOverwritableIndex", color = "green" ];
}

subgraph "clusterLib_RingBuffer" {
  graph [ label = "Lib_RingBuffer  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_RingBuffer.push" [ label = "push", color = "white" ];
  "Lib_RingBuffer.push2" [ label = "push2", color = "white" ];
  "Lib_RingBuffer.get" [ label = "get", color = "white" ];
  "Lib_RingBuffer.deleteElementsAfterInclusive" [ label = "deleteElementsAfterInclusive", color = "white" ];
  "Lib_RingBuffer.getLength" [ label = "getLength", color = "white" ];
  "Lib_RingBuffer.setExtraData" [ label = "setExtraData", color = "white" ];
  "Lib_RingBuffer.getExtraData" [ label = "getExtraData", color = "white" ];
  "Lib_RingBuffer.setContext" [ label = "setContext", color = "white" ];
  "Lib_RingBuffer.getContext" [ label = "getContext", color = "white" ];
  "Lib_RingBuffer.getBuffer" [ label = "getBuffer", color = "white" ];
}

subgraph "clusterOVM_StateCommitmentChain" {
  graph [ label = "OVM_StateCommitmentChain", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_StateCommitmentChain.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_StateCommitmentChain.batches" [ label = "batches", color = "green" ];
  "OVM_StateCommitmentChain.getTotalElements" [ label = "getTotalElements", color = "green" ];
  "OVM_StateCommitmentChain.getTotalBatches" [ label = "getTotalBatches", color = "green" ];
  "OVM_StateCommitmentChain.getLastSequencerTimestamp" [ label = "getLastSequencerTimestamp", color = "green" ];
  "OVM_StateCommitmentChain.appendStateBatch" [ label = "appendStateBatch", color = "green" ];
  "OVM_StateCommitmentChain.deleteStateBatch" [ label = "deleteStateBatch", color = "green" ];
  "iOVM_StateCommitmentChain.verifyStateCommitment" [ label = "verifyStateCommitment", color = "green" ];
  "iOVM_StateCommitmentChain.insideFraudProofWindow" [ label = "insideFraudProofWindow", color = "green" ];
  "OVM_StateCommitmentChain._getBatchExtraData" [ label = "_getBatchExtraData" ];
  "OVM_StateCommitmentChain._makeBatchExtraData" [ label = "_makeBatchExtraData" ];
  "OVM_StateCommitmentChain._appendBatch" [ label = "_appendBatch" ];
  "OVM_StateCommitmentChain._deleteBatch" [ label = "_deleteBatch" ];
  "OVM_StateCommitmentChain._isValidBatchHeader" [ label = "_isValidBatchHeader" ];
}

subgraph "clusteriOVM_FraudVerifier" {
  graph [ label = "iOVM_FraudVerifier  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_FraudVerifier.getStateTransitioner" [ label = "getStateTransitioner", color = "blue" ];
  "iOVM_FraudVerifier.initializeFraudVerification" [ label = "initializeFraudVerification", color = "blue" ];
  "iOVM_FraudVerifier.finalizeFraudVerification" [ label = "finalizeFraudVerification", color = "blue" ];
}

subgraph "clusteriOVM_StateTransitioner" {
  graph [ label = "iOVM_StateTransitioner  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_StateTransitioner.getPreStateRoot" [ label = "getPreStateRoot", color = "blue" ];
  "iOVM_StateTransitioner.getPostStateRoot" [ label = "getPostStateRoot" ];
  "iOVM_StateTransitioner.isComplete" [ label = "isComplete" ];
  "iOVM_StateTransitioner.proveContractState" [ label = "proveContractState", color = "blue" ];
  "iOVM_StateTransitioner.proveStorageSlot" [ label = "proveStorageSlot", color = "blue" ];
  "iOVM_StateTransitioner.applyTransaction" [ label = "applyTransaction", color = "blue" ];
  "iOVM_StateTransitioner.commitContractState" [ label = "commitContractState", color = "blue" ];
  "iOVM_StateTransitioner.commitStorageSlot" [ label = "commitStorageSlot", color = "blue" ];
  "iOVM_StateTransitioner.completeTransition" [ label = "completeTransition", color = "blue" ];
}

subgraph "clusterERC20" {
  graph [ label = "ERC20  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "ERC20.transfer" [ label = "transfer" ];
  "ERC20.transferFrom" [ label = "transferFrom" ];
}

subgraph "clusterErrors" {
  graph [ label = "Errors  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
}

subgraph "clusteriOVM_BondManager" {
  graph [ label = "iOVM_BondManager  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_BondManager.recordGasSpent" [ label = "recordGasSpent", color = "blue" ];
  "iOVM_BondManager.finalize" [ label = "finalize" ];
  "iOVM_BondManager.deposit" [ label = "deposit", color = "blue" ];
  "iOVM_BondManager.startWithdrawal" [ label = "startWithdrawal", color = "blue" ];
  "iOVM_BondManager.finalizeWithdrawal" [ label = "finalizeWithdrawal", color = "blue" ];
  "iOVM_BondManager.claim" [ label = "claim", color = "blue" ];
  "iOVM_BondManager.isCollateralized" [ label = "isCollateralized", color = "blue" ];
  "iOVM_BondManager.getGasSpent" [ label = "getGasSpent", color = "blue" ];
}

subgraph "clusterSafeMath" {
  graph [ label = "SafeMath  (lib)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "SafeMath.add" [ label = "add", color = "white" ];
  "SafeMath.sub" [ label = "sub" ];
  "SafeMath.mul" [ label = "mul", color = "white" ];
  "SafeMath.div" [ label = "div" ];
  "SafeMath.mod" [ label = "mod" ];
}

subgraph "clusterOVM_SafetyChecker" {
  graph [ label = "OVM_SafetyChecker", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_SafetyChecker.isBytecodeSafe" [ label = "isBytecodeSafe", color = "blue" ];
}

subgraph "clusterOVM_StateManager" {
  graph [ label = "OVM_StateManager", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_StateManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_StateManager.authenticated" [ label = "authenticated", color = "yellow" ];
  "iOVM_StateManager.isAuthenticated" [ label = "isAuthenticated", color = "green" ];
  "OVM_StateManager.setExecutionManager" [ label = "setExecutionManager", color = "green" ];
  "OVM_StateManager.putAccount" [ label = "putAccount", color = "green" ];
  "OVM_StateManager.putEmptyAccount" [ label = "putEmptyAccount", color = "green" ];
  "OVM_StateManager.getAccount" [ label = "getAccount", color = "green" ];
  "iOVM_StateManager.hasAccount" [ label = "hasAccount", color = "green" ];
  "iOVM_StateManager.hasEmptyAccount" [ label = "hasEmptyAccount", color = "green" ];
  "iOVM_StateManager.setAccountNonce" [ label = "setAccountNonce", color = "green" ];
  "iOVM_StateManager.getAccountNonce" [ label = "getAccountNonce", color = "green" ];
  "iOVM_StateManager.getAccountEthAddress" [ label = "getAccountEthAddress", color = "green" ];
  "OVM_StateManager.getAccountStorageRoot" [ label = "getAccountStorageRoot", color = "green" ];
  "iOVM_StateManager.initPendingAccount" [ label = "initPendingAccount", color = "green" ];
  "iOVM_StateManager.commitPendingAccount" [ label = "commitPendingAccount", color = "green" ];
  "iOVM_StateManager.testAndSetAccountLoaded" [ label = "testAndSetAccountLoaded", color = "green" ];
  "iOVM_StateManager.testAndSetAccountChanged" [ label = "testAndSetAccountChanged", color = "green" ];
  "OVM_StateManager.commitAccount" [ label = "commitAccount", color = "green" ];
  "iOVM_StateManager.incrementTotalUncommittedAccounts" [ label = "incrementTotalUncommittedAccounts", color = "green" ];
  "OVM_StateManager.getTotalUncommittedAccounts" [ label = "getTotalUncommittedAccounts", color = "green" ];
  "OVM_StateManager.wasAccountChanged" [ label = "wasAccountChanged", color = "green" ];
  "OVM_StateManager.wasAccountCommitted" [ label = "wasAccountCommitted", color = "green" ];
  "iOVM_StateManager.putContractStorage" [ label = "putContractStorage", color = "green" ];
  "iOVM_StateManager.getContractStorage" [ label = "getContractStorage", color = "green" ];
  "iOVM_StateManager.hasContractStorage" [ label = "hasContractStorage", color = "green" ];
  "iOVM_StateManager.testAndSetContractStorageLoaded" [ label = "testAndSetContractStorageLoaded", color = "green" ];
  "iOVM_StateManager.testAndSetContractStorageChanged" [ label = "testAndSetContractStorageChanged", color = "green" ];
  "OVM_StateManager.commitContractStorage" [ label = "commitContractStorage", color = "green" ];
  "iOVM_StateManager.incrementTotalUncommittedContractStorage" [ label = "incrementTotalUncommittedContractStorage", color = "green" ];
  "OVM_StateManager.getTotalUncommittedContractStorage" [ label = "getTotalUncommittedContractStorage", color = "green" ];
  "OVM_StateManager.wasContractStorageChanged" [ label = "wasContractStorageChanged", color = "green" ];
  "OVM_StateManager.wasContractStorageCommitted" [ label = "wasContractStorageCommitted", color = "green" ];
  "OVM_StateManager._getItemHash" [ label = "_getItemHash" ];
  "OVM_StateManager._testAndSetItemState" [ label = "_testAndSetItemState" ];
}

subgraph "clusterOVM_StateManagerFactory" {
  graph [ label = "OVM_StateManagerFactory", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_StateManagerFactory.create" [ label = "create", color = "green" ];
}

subgraph "clusteriOVM_StateManagerFactory" {
  graph [ label = "iOVM_StateManagerFactory  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_StateManagerFactory.create" [ label = "create", color = "blue" ];
}

subgraph "clusterOVM_ETH" {
  graph [ label = "OVM_ETH", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_ETH.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_ETH.transfer" [ label = "transfer", color = "blue" ];
  "OVM_ETH.transferFrom" [ label = "transferFrom", color = "blue" ];
  "OVM_ETH.balanceOf" [ label = "balanceOf", color = "blue" ];
  "OVM_ETH.approve" [ label = "approve", color = "blue" ];
  "OVM_ETH.allowance" [ label = "allowance", color = "blue" ];
}

subgraph "clusteriOVM_ERC20" {
  graph [ label = "iOVM_ERC20  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_ERC20.totalSupply" [ label = "totalSupply", color = "blue" ];
  "iOVM_ERC20.balanceOf" [ label = "balanceOf", color = "blue" ];
  "iOVM_ERC20.transfer" [ label = "transfer", color = "blue" ];
  "iOVM_ERC20.transferFrom" [ label = "transferFrom", color = "blue" ];
  "iOVM_ERC20.approve" [ label = "approve", color = "blue" ];
  "iOVM_ERC20.allowance" [ label = "allowance", color = "blue" ];
}

subgraph "clusterOVM_L1MessageSender" {
  graph [ label = "OVM_L1MessageSender", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_L1MessageSender.getL1MessageSender" [ label = "getL1MessageSender", color = "green" ];
}

subgraph "clusterOVM_L2ToL1MessagePasser" {
  graph [ label = "OVM_L2ToL1MessagePasser", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_L2ToL1MessagePasser.passMessageToL1" [ label = "passMessageToL1", color = "green" ];
}

subgraph "clusterOVM_ProxySequencerEntrypoint" {
  graph [ label = "OVM_ProxySequencerEntrypoint", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_ProxySequencerEntrypoint.<Fallback>" [ label = "<Fallback>", color = "blue" ];
  "OVM_ProxySequencerEntrypoint.init" [ label = "init", color = "blue" ];
  "OVM_ProxySequencerEntrypoint.upgrade" [ label = "upgrade", color = "blue" ];
  "OVM_ProxySequencerEntrypoint._setImplementation" [ label = "_setImplementation" ];
  "OVM_ProxySequencerEntrypoint._getImplementation" [ label = "_getImplementation" ];
  "OVM_ProxySequencerEntrypoint._setOwner" [ label = "_setOwner" ];
  "OVM_ProxySequencerEntrypoint._getOwner" [ label = "_getOwner" ];
}

subgraph "clusterOVM_SequencerEntrypoint" {
  graph [ label = "OVM_SequencerEntrypoint", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_SequencerEntrypoint.<Fallback>" [ label = "<Fallback>", color = "blue" ];
  "OVM_SequencerEntrypoint._getTransactionType" [ label = "_getTransactionType" ];
}

subgraph "clusterOVM_BondManager" {
  graph [ label = "OVM_BondManager", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_BondManager.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_BondManager.recordGasSpent" [ label = "recordGasSpent", color = "green" ];
  "OVM_BondManager.finalize" [ label = "finalize", color = "green" ];
  "OVM_BondManager.deposit" [ label = "deposit", color = "green" ];
  "OVM_BondManager.startWithdrawal" [ label = "startWithdrawal", color = "green" ];
  "OVM_BondManager.finalizeWithdrawal" [ label = "finalizeWithdrawal", color = "green" ];
  "OVM_BondManager.claim" [ label = "claim", color = "green" ];
  "OVM_BondManager.isCollateralized" [ label = "isCollateralized", color = "green" ];
  "OVM_BondManager.getGasSpent" [ label = "getGasSpent", color = "green" ];
}

subgraph "clusterOVM_FraudContributor" {
  graph [ label = "OVM_FraudContributor", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_FraudContributor.contributesToFraudProof" [ label = "contributesToFraudProof", color = "yellow" ];
}

subgraph "clusterOVM_FraudVerifier" {
  graph [ label = "OVM_FraudVerifier", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_FraudVerifier.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_FraudVerifier.getStateTransitioner" [ label = "getStateTransitioner" ];
  "OVM_FraudVerifier.initializeFraudVerification" [ label = "initializeFraudVerification", color = "green" ];
  "OVM_FraudVerifier.finalizeFraudVerification" [ label = "finalizeFraudVerification", color = "green" ];
  "OVM_FraudVerifier._hasStateTransitioner" [ label = "_hasStateTransitioner" ];
  "OVM_FraudVerifier._deployTransitioner" [ label = "_deployTransitioner" ];
  "OVM_FraudVerifier._cancelStateTransition" [ label = "_cancelStateTransition" ];
}

subgraph "clusteriOVM_StateTransitionerFactory" {
  graph [ label = "iOVM_StateTransitionerFactory  (iface)", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "iOVM_StateTransitionerFactory.create" [ label = "create", color = "blue" ];
}

subgraph "clusterOVM_StateTransitioner" {
  graph [ label = "OVM_StateTransitioner", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_StateTransitioner.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_StateTransitioner.onlyDuringPhase" [ label = "onlyDuringPhase", color = "yellow" ];
  "OVM_StateTransitioner.getPreStateRoot" [ label = "getPreStateRoot", color = "green" ];
  "iOVM_StateTransitioner.getPostStateRoot" [ label = "getPostStateRoot", color = "green" ];
  "iOVM_StateTransitioner.isComplete" [ label = "isComplete", color = "green" ];
  "OVM_StateTransitioner.proveContractState" [ label = "proveContractState", color = "green" ];
  "OVM_StateTransitioner.proveStorageSlot" [ label = "proveStorageSlot", color = "green" ];
  "OVM_StateTransitioner.applyTransaction" [ label = "applyTransaction", color = "green" ];
  "OVM_StateTransitioner.commitContractState" [ label = "commitContractState", color = "green" ];
  "OVM_StateTransitioner.commitStorageSlot" [ label = "commitStorageSlot", color = "green" ];
  "OVM_StateTransitioner.completeTransition" [ label = "completeTransition", color = "green" ];
}

subgraph "clusterOVM_StateTransitionerFactory" {
  graph [ label = "OVM_StateTransitionerFactory", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "OVM_StateTransitionerFactory.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "OVM_StateTransitionerFactory.create" [ label = "create", color = "green" ];
}

subgraph "clusterLib_ResolvedDelegateProxy" {
  graph [ label = "Lib_ResolvedDelegateProxy", color = "lightgray", style = "filled", bgcolor = "lightgray" ];
  "Lib_ResolvedDelegateProxy.<Constructor>" [ label = "<Constructor>", color = "green" ];
  "Lib_ResolvedDelegateProxy.<Fallback>" [ label = "<Fallback>", color = "blue" ];
}

subgraph "cluster_target" {
  graph [ label = "_target", color = "lightgray" ];
  "_target.call" [ label = "call" ];
}

subgraph "clusterLib_RingBuffer.RingBuffer" {
  graph [ label = "Lib_RingBuffer.RingBuffer", color = "lightgray" ];
  "Lib_RingBuffer.RingBuffer.setExtraData" [ label = "setExtraData" ];
  "Lib_RingBuffer.RingBuffer.getExtraData" [ label = "getExtraData" ];
  "Lib_RingBuffer.RingBuffer.getLength" [ label = "getLength" ];
  "Lib_RingBuffer.RingBuffer.push2" [ label = "push2" ];
  "Lib_RingBuffer.RingBuffer.get" [ label = "get" ];
  "Lib_RingBuffer.RingBuffer.deleteElementsAfterInclusive" [ label = "deleteElementsAfterInclusive" ];
}

subgraph "clusterRingBuffer" {
  graph [ label = "RingBuffer", color = "lightgray" ];
  "RingBuffer.getContext" [ label = "getContext" ];
  "RingBuffer.getBuffer" [ label = "getBuffer" ];
  "RingBuffer.setContext" [ label = "setContext" ];
  "RingBuffer.push2" [ label = "push2" ];
  "RingBuffer.deleteElementsAfterInclusive" [ label = "deleteElementsAfterInclusive" ];
}

subgraph "clustertarget" {
  graph [ label = "target", color = "lightgray" ];
  "target.delegatecall" [ label = "delegatecall" ];
}

  "OVM_ECDSAContractAccount.execute";
  "Lib_SafeExecutionManagerWrapper.safeREQUIRE";
  "Lib_ECDSAUtils.recover";
  "Lib_SafeExecutionManagerWrapper.safeADDRESS";
  "Lib_OVMCodec.decodeEIP155Transaction";
  "Lib_SafeExecutionManagerWrapper.safeCHAINID";
  "Lib_SafeExecutionManagerWrapper.safeGETNONCE";
  "Lib_SafeExecutionManagerWrapper.safeCALLER";
  "Lib_SafeExecutionManagerWrapper.safeCALL";
  "Lib_SafeExecutionManagerWrapper.safeCREATE";
  "Lib_SafeExecutionManagerWrapper.safeSETNONCE";
  "Lib_RLPReader.readList";
  "Lib_RLPReader.readUint256";
  "Lib_RLPReader.readAddress";
  "Lib_RLPReader.readBytes";
  "Lib_OVMCodec.decompressEIP155Transaction";
  "Lib_BytesUtils.toUint24";
  "Lib_BytesUtils.toAddress";
  "Lib_BytesUtils.slice";
  "Lib_OVMCodec.encodeEIP155Transaction";
  "Lib_RLPWriter.writeUint";
  "Lib_RLPWriter.writeBytes";
  "Lib_RLPWriter.writeAddress";
  "Lib_RLPWriter.writeList";
  "Lib_OVMCodec.hashTransaction";
  "Lib_OVMCodec.encodeTransaction";
  "Lib_OVMCodec.encodeEVMAccount";
  "Lib_Bytes32Utils.removeLeadingZeros";
  "Lib_OVMCodec.decodeEVMAccount";
  "Lib_RLPReader.readBytes32";
  "Lib_RLPReader._decodeLength";
  "Lib_RLPReader.toRLPItem";
  "Lib_RLPReader._copy";
  "Lib_RLPReader.readString";
  "Lib_RLPReader.readBool";
  "Lib_RLPReader.readRawBytes";
  "Lib_BytesUtils.concat";
  "Lib_RLPWriter._writeLength";
  "Lib_RLPWriter._flatten";
  "Lib_RLPWriter.writeString";
  "Lib_RLPWriter._toBinary";
  "Lib_RLPWriter._memcpy";
  "Lib_BytesUtils.toUint256";
  "Lib_BytesUtils.toBytes32";
  "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction";
  "Lib_SafeExecutionManagerWrapper.safeDELEGATECALL";
  "Lib_SafeExecutionManagerWrapper.safeEXTCODESIZE";
  "Lib_SafeExecutionManagerWrapper.safeCREATEEOA";
  "Lib_SafeExecutionManagerWrapper.safeREVERT";
  "Lib_SafeExecutionManagerWrapper.safeSLOAD";
  "Lib_SafeExecutionManagerWrapper.safeSSTORE";
  "Lib_ECDSAUtils.getMessageHash";
  "Lib_ECDSAUtils.getEthSignedMessageHash";
  "Lib_ECDSAUtils.getNativeMessageHash";
  "Lib_SafeMathWrapper.add";
  "Lib_SafeMathWrapper.sub";
  "Lib_SafeMathWrapper.mul";
  "Lib_SafeMathWrapper.div";
  "Lib_SafeMathWrapper.mod";
  "OVM_ProxyEOA.<Constructor>";
  "OVM_ProxyEOA._setImplementation";
  "OVM_ProxyEOA.<Fallback>";
  "OVM_ProxyEOA.getImplementation";
  "OVM_ProxyEOA.upgrade";
  "OVM_BaseCrossDomainMessenger.sendMessage";
  "OVM_BaseCrossDomainMessenger._getXDomainCalldata";
  "OVM_BaseCrossDomainMessenger._sendXDomainMessage";
  "OVM_L1CrossDomainMessenger.onlyRelayer";
  "OVM_L1CrossDomainMessenger.resolve";
  "OVM_L1CrossDomainMessenger.relayMessage";
  "OVM_L1CrossDomainMessenger._verifyXDomainMessage";
  "_target.call";
  "OVM_L1CrossDomainMessenger.replayMessage";
  "OVM_L1CrossDomainMessenger._verifyStateRootProof";
  "OVM_L1CrossDomainMessenger._verifyStorageProof";
  "iOVM_StateCommitmentChain.insideFraudProofWindow";
  "iOVM_StateCommitmentChain.verifyStateCommitment";
  "Lib_SecureMerkleTrie.get";
  "Lib_SecureMerkleTrie.verifyInclusionProof";
  "Lib_AddressResolver.resolve";
  "Lib_AddressManager.getAddress";
  "Lib_AddressManager.setAddress";
  "Lib_AddressManager._getNameHash";
  "Lib_SecureMerkleTrie._getSecureKey";
  "Lib_MerkleTrie.verifyInclusionProof";
  "Lib_SecureMerkleTrie.verifyExclusionProof";
  "Lib_MerkleTrie.verifyExclusionProof";
  "Lib_SecureMerkleTrie.update";
  "Lib_MerkleTrie.update";
  "Lib_MerkleTrie.get";
  "Lib_SecureMerkleTrie.getSingleNodeRootHash";
  "Lib_MerkleTrie.getSingleNodeRootHash";
  "Lib_BytesUtils.equal";
  "Lib_MerkleTrie._parseProof";
  "Lib_MerkleTrie._walkNodePath";
  "Lib_MerkleTrie._getNewPath";
  "Lib_MerkleTrie._getUpdatedTrieRoot";
  "Lib_MerkleTrie._getNodeValue";
  "Lib_MerkleTrie._makeLeafNode";
  "Lib_BytesUtils.toNibbles";
  "Lib_MerkleTrie._getNodeID";
  "Lib_MerkleTrie._getNodePath";
  "Lib_MerkleTrie._getSharedNibbleLength";
  "Lib_MerkleTrie._getNodeType";
  "Lib_MerkleTrie._getNodeKey";
  "Lib_MerkleTrie._editBranchValue";
  "Lib_MerkleTrie._makeExtensionNode";
  "Lib_MerkleTrie._getNodeHash";
  "Lib_MerkleTrie._makeEmptyBranchNode";
  "Lib_MerkleTrie._editBranchIndex";
  "Lib_MerkleTrie._joinNodeArrays";
  "Lib_MerkleTrie._removeHexPrefix";
  "Lib_MerkleTrie._makeNode";
  "Lib_MerkleTrie._addHexPrefix";
  "Lib_BytesUtils.fromNibbles";
  "OVM_L2CrossDomainMessenger.relayMessage";
  "OVM_L2CrossDomainMessenger._verifyXDomainMessage";
  "OVM_CanonicalTransactionChain.batches";
  "OVM_CanonicalTransactionChain.queue";
  "OVM_CanonicalTransactionChain.getTotalElements";
  "OVM_CanonicalTransactionChain._getBatchExtraData";
  "OVM_CanonicalTransactionChain.getTotalBatches";
  "OVM_CanonicalTransactionChain.getNextQueueIndex";
  "OVM_CanonicalTransactionChain.getQueueElement";
  "Lib_OVMCodec.QueueElement";
  "OVM_CanonicalTransactionChain.getNumPendingQueueElements";
  "OVM_CanonicalTransactionChain.getQueueLength";
  "OVM_CanonicalTransactionChain.enqueue";
  "OVM_CanonicalTransactionChain.appendQueueBatch";
  "Lib_Math.min";
  "OVM_CanonicalTransactionChain._getQueueLeafHash";
  "OVM_CanonicalTransactionChain._appendBatch";
  "Lib_MerkleTree.getMerkleRoot";
  "OVM_CanonicalTransactionChain.appendSequencerBatch";
  "OVM_CanonicalTransactionChain._getBatchContext";
  "OVM_CanonicalTransactionChain._validateFirstBatchContext";
  "OVM_CanonicalTransactionChain._validateNextBatchContext";
  "OVM_CanonicalTransactionChain._getSequencerLeafHash";
  "OVM_CanonicalTransactionChain._validateFinalBatchContext";
  "OVM_CanonicalTransactionChain.verifyTransaction";
  "OVM_CanonicalTransactionChain._verifySequencerTransaction";
  "OVM_CanonicalTransactionChain._verifyQueueTransaction";
  "OVM_CanonicalTransactionChain._hashTransactionChainElement";
  "Lib_OVMCodec.TransactionChainElement";
  "OVM_CanonicalTransactionChain._getQueueLength";
  "Lib_OVMCodec.ChainBatchHeader";
  "Lib_OVMCodec.hashBatchHeader";
  "OVM_CanonicalTransactionChain._makeBatchExtraData";
  "OVM_ExecutionManager.getMaxTransactionGasLimit";
  "OVM_CanonicalTransactionChain._verifyElement";
  "Lib_MerkleTree.verify";
  "Lib_MerkleTree._ceilLog2";
  "OVM_ExecutionManager.<Constructor>";
  "OVM_ExecutionManager.notStatic";
  "OVM_ExecutionManager._revertWithFlag";
  "OVM_ExecutionManager.run";
  "iOVM_StateManager.isAuthenticated";
  "OVM_ExecutionManager._initContext";
  "OVM_ExecutionManager._isValidGasLimit";
  "OVM_ExecutionManager.ovmCALL";
  "OVM_ExecutionManager._resetContext";
  "OVM_ExecutionManager.ovmREVERT";
  "OVM_ExecutionManager.ovmCREATE";
  "OVM_ExecutionManager.ovmADDRESS";
  "OVM_ExecutionManager._checkDeployerAllowed";
  "Lib_EthUtils.getAddressForCREATE";
  "OVM_ExecutionManager._getAccountNonce";
  "OVM_ExecutionManager._createContract";
  "OVM_ExecutionManager.ovmCREATE2";
  "Lib_EthUtils.getAddressForCREATE2";
  "OVM_ExecutionManager.ovmGETNONCE";
  "OVM_ExecutionManager.ovmSETNONCE";
  "OVM_ExecutionManager._setAccountNonce";
  "OVM_ExecutionManager.ovmCREATEEOA";
  "OVM_ExecutionManager._hasEmptyAccount";
  "OVM_ExecutionManager._initPendingAccount";
  "OVM_ExecutionManager._commitPendingAccount";
  "Lib_EthUtils.getCode";
  "OVM_ExecutionManager._callContract";
  "OVM_ExecutionManager.ovmSTATICCALL";
  "OVM_ExecutionManager.ovmDELEGATECALL";
  "OVM_ExecutionManager.ovmSLOAD";
  "OVM_ExecutionManager._getContractStorage";
  "OVM_ExecutionManager.ovmSSTORE";
  "OVM_ExecutionManager._putContractStorage";
  "OVM_ExecutionManager.ovmEXTCODECOPY";
  "OVM_ExecutionManager._getAccountEthAddress";
  "OVM_ExecutionManager.ovmEXTCODESIZE";
  "Lib_EthUtils.getCodeSize";
  "OVM_ExecutionManager.ovmEXTCODEHASH";
  "Lib_EthUtils.getCodeHash";
  "OVM_ExecutionManager.safeCREATE";
  "iOVM_SafetyChecker.isBytecodeSafe";
  "Lib_EthUtils.createContract";
  "OVM_ExecutionManager._handleExternalInteraction";
  "OVM_ExecutionManager._switchMessageContext";
  "OVM_ExecutionManager._getNuisanceGasLimit";
  "OVM_ExecutionManager._decodeRevertData";
  "OVM_ExecutionManager._hasAccount";
  "OVM_ExecutionManager._checkAccountLoad";
  "iOVM_StateManager.hasAccount";
  "iOVM_StateManager.hasEmptyAccount";
  "OVM_ExecutionManager._checkAccountChange";
  "iOVM_StateManager.setAccountNonce";
  "iOVM_StateManager.getAccountNonce";
  "iOVM_StateManager.getAccountEthAddress";
  "iOVM_StateManager.initPendingAccount";
  "iOVM_StateManager.commitPendingAccount";
  "OVM_ExecutionManager._checkContractStorageLoad";
  "iOVM_StateManager.getContractStorage";
  "OVM_ExecutionManager._checkContractStorageChange";
  "iOVM_StateManager.putContractStorage";
  "iOVM_StateManager.testAndSetAccountLoaded";
  "OVM_ExecutionManager._useNuisanceGas";
  "iOVM_StateManager.testAndSetAccountChanged";
  "iOVM_StateManager.incrementTotalUncommittedAccounts";
  "iOVM_StateManager.hasContractStorage";
  "iOVM_StateManager.testAndSetContractStorageLoaded";
  "iOVM_StateManager.testAndSetContractStorageChanged";
  "iOVM_StateManager.incrementTotalUncommittedContractStorage";
  "OVM_ExecutionManager._encodeRevertData";
  "OVM_ExecutionManager._checkNeedsNewEpoch";
  "OVM_ExecutionManager._getGasMetadata";
  "OVM_ExecutionManager._putGasMetadata";
  "OVM_ExecutionManager._updateCumulativeGas";
  "Lib_Bytes32Utils.toAddress";
  "OVM_DeployerWhitelist.onlyOwner";
  "OVM_DeployerWhitelist.initialize";
  "Lib_Bytes32Utils.toBool";
  "Lib_Bytes32Utils.fromBool";
  "Lib_Bytes32Utils.fromAddress";
  "OVM_DeployerWhitelist.getOwner";
  "OVM_DeployerWhitelist.setWhitelistedDeployer";
  "OVM_DeployerWhitelist.setOwner";
  "OVM_DeployerWhitelist.setAllowArbitraryDeployment";
  "OVM_DeployerWhitelist.enableArbitraryContractDeployment";
  "OVM_DeployerWhitelist.isDeployerAllowed";
  "OVM_ChainStorageContainer.onlyOwner";
  "OVM_ChainStorageContainer.setGlobalMetadata";
  "Lib_RingBuffer.RingBuffer.setExtraData";
  "OVM_ChainStorageContainer.getGlobalMetadata";
  "Lib_RingBuffer.RingBuffer.getExtraData";
  "OVM_ChainStorageContainer.length";
  "Lib_RingBuffer.RingBuffer.getLength";
  "OVM_ChainStorageContainer.push2";
  "Lib_RingBuffer.RingBuffer.push2";
  "OVM_ChainStorageContainer.get";
  "Lib_RingBuffer.RingBuffer.get";
  "OVM_ChainStorageContainer.deleteElementsAfterInclusive";
  "Lib_RingBuffer.RingBuffer.deleteElementsAfterInclusive";
  "Lib_RingBuffer.push";
  "RingBuffer.getContext";
  "RingBuffer.getBuffer";
  "RingBuffer.setContext";
  "Lib_RingBuffer.push2";
  "RingBuffer.push2";
  "Lib_RingBuffer.get";
  "Lib_RingBuffer.deleteElementsAfterInclusive";
  "RingBuffer.deleteElementsAfterInclusive";
  "Lib_RingBuffer.getLength";
  "Lib_RingBuffer.setExtraData";
  "Lib_RingBuffer.getExtraData";
  "OVM_StateCommitmentChain.batches";
  "OVM_StateCommitmentChain.getTotalElements";
  "OVM_StateCommitmentChain._getBatchExtraData";
  "OVM_StateCommitmentChain.getTotalBatches";
  "OVM_StateCommitmentChain.getLastSequencerTimestamp";
  "OVM_StateCommitmentChain.appendStateBatch";
  "OVM_StateCommitmentChain._appendBatch";
  "OVM_StateCommitmentChain.deleteStateBatch";
  "OVM_StateCommitmentChain._isValidBatchHeader";
  "OVM_StateCommitmentChain._deleteBatch";
  "SafeMath.add";
  "OVM_StateCommitmentChain._makeBatchExtraData";
  "SafeMath.sub";
  "SafeMath.div";
  "SafeMath.mod";
  "OVM_StateManager._testAndSetItemState";
  "OVM_StateManager._getItemHash";
  "OVM_StateManager.commitAccount";
  "OVM_StateManager.wasAccountChanged";
  "OVM_StateManager.wasAccountCommitted";
  "OVM_StateManager.commitContractStorage";
  "OVM_StateManager.wasContractStorageChanged";
  "OVM_StateManager.wasContractStorageCommitted";
  "OVM_ProxySequencerEntrypoint.<Fallback>";
  "OVM_ProxySequencerEntrypoint._getImplementation";
  "OVM_ProxySequencerEntrypoint.init";
  "OVM_ProxySequencerEntrypoint._getOwner";
  "OVM_ProxySequencerEntrypoint._setOwner";
  "OVM_ProxySequencerEntrypoint._setImplementation";
  "OVM_ProxySequencerEntrypoint.upgrade";
  "OVM_SequencerEntrypoint.<Fallback>";
  "OVM_SequencerEntrypoint._getTransactionType";
  "Lib_BytesUtils.toUint8";
  "OVM_BondManager.recordGasSpent";
  "OVM_BondManager.finalize";
  "OVM_BondManager.deposit";
  "ERC20.transferFrom";
  "OVM_BondManager.finalizeWithdrawal";
  "ERC20.transfer";
  "OVM_BondManager.claim";
  "OVM_FraudContributor.contributesToFraudProof";
  "OVM_FraudVerifier.initializeFraudVerification";
  "OVM_FraudVerifier._hasStateTransitioner";
  "iOVM_CanonicalTransactionChain.verifyTransaction";
  "OVM_FraudVerifier._deployTransitioner";
  "OVM_FraudVerifier.finalizeFraudVerification";
  "OVM_FraudVerifier.getStateTransitioner";
  "iOVM_StateTransitioner.isComplete";
  "iOVM_StateTransitioner.getPostStateRoot";
  "OVM_FraudVerifier._cancelStateTransition";
  "iOVM_StateCommitmentChain.deleteStateBatch";
  "iOVM_BondManager.finalize";
  "OVM_StateTransitioner.<Constructor>";
  "OVM_StateTransitioner.proveContractState";
  "iOVM_StateManager.putAccount";
  "Lib_OVMCodec.Account";
  "iOVM_StateManager.putEmptyAccount";
  "OVM_StateTransitioner.proveStorageSlot";
  "iOVM_StateManager.getAccountStorageRoot";
  "Lib_BytesUtils.toBytes32PadLeft";
  "OVM_StateTransitioner.applyTransaction";
  "iOVM_StateManager.setExecutionManager";
  "iOVM_ExecutionManager.run";
  "OVM_StateTransitioner.commitContractState";
  "iOVM_StateManager.getTotalUncommittedContractStorage";
  "iOVM_StateManager.commitAccount";
  "iOVM_StateManager.getAccount";
  "Lib_OVMCodec.toEVMAccount";
  "OVM_StateTransitioner.commitStorageSlot";
  "iOVM_StateManager.commitContractStorage";
  "OVM_StateTransitioner.completeTransition";
  "iOVM_StateManager.getTotalUncommittedAccounts";
  "OVM_StateTransitionerFactory.create";
  "Lib_ResolvedDelegateProxy.<Fallback>";
  "target.delegatecall";
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_ECDSAUtils.recover" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeADDRESS" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_OVMCodec.decodeEIP155Transaction" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeCHAINID" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeGETNONCE" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeCALLER" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeCALL" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeCREATE" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeSETNONCE" [ color = "orange" ];
  "OVM_ECDSAContractAccount.execute" -> "Lib_SafeExecutionManagerWrapper.safeCALL" [ color = "orange" ];
  "Lib_OVMCodec.decodeEIP155Transaction" -> "Lib_RLPReader.readList" [ color = "orange" ];
  "Lib_OVMCodec.decodeEIP155Transaction" -> "Lib_RLPReader.readUint256" [ color = "orange" ];
  "Lib_OVMCodec.decodeEIP155Transaction" -> "Lib_RLPReader.readUint256" [ color = "orange" ];
  "Lib_OVMCodec.decodeEIP155Transaction" -> "Lib_RLPReader.readUint256" [ color = "orange" ];
  "Lib_OVMCodec.decodeEIP155Transaction" -> "Lib_RLPReader.readAddress" [ color = "orange" ];
  "Lib_OVMCodec.decodeEIP155Transaction" -> "Lib_RLPReader.readUint256" [ color = "orange" ];
  "Lib_OVMCodec.decodeEIP155Transaction" -> "Lib_RLPReader.readBytes" [ color = "orange" ];
  "Lib_OVMCodec.decodeEIP155Transaction" -> "Lib_RLPReader.readUint256" [ color = "orange" ];
  "Lib_OVMCodec.decompressEIP155Transaction" -> "Lib_BytesUtils.toUint24" [ color = "orange" ];
  "Lib_OVMCodec.decompressEIP155Transaction" -> "Lib_BytesUtils.toUint24" [ color = "orange" ];
  "Lib_OVMCodec.decompressEIP155Transaction" -> "Lib_BytesUtils.toUint24" [ color = "orange" ];
  "Lib_OVMCodec.decompressEIP155Transaction" -> "Lib_BytesUtils.toAddress" [ color = "orange" ];
  "Lib_OVMCodec.decompressEIP155Transaction" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_OVMCodec.decompressEIP155Transaction" -> "Lib_SafeExecutionManagerWrapper.safeCHAINID" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeUint" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeUint" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeUint" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeAddress" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeUint" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeUint" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_OVMCodec.encodeEIP155Transaction" -> "Lib_RLPWriter.writeList" [ color = "orange" ];
  "Lib_OVMCodec.hashTransaction" -> "Lib_OVMCodec.encodeTransaction" [ color = "green" ];
  "Lib_OVMCodec.encodeEVMAccount" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_OVMCodec.encodeEVMAccount" -> "Lib_Bytes32Utils.removeLeadingZeros" [ color = "orange" ];
  "Lib_OVMCodec.encodeEVMAccount" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_OVMCodec.encodeEVMAccount" -> "Lib_Bytes32Utils.removeLeadingZeros" [ color = "orange" ];
  "Lib_OVMCodec.encodeEVMAccount" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_OVMCodec.encodeEVMAccount" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_OVMCodec.encodeEVMAccount" -> "Lib_RLPWriter.writeList" [ color = "orange" ];
  "Lib_OVMCodec.decodeEVMAccount" -> "Lib_RLPReader.readList" [ color = "orange" ];
  "Lib_OVMCodec.decodeEVMAccount" -> "Lib_RLPReader.readUint256" [ color = "orange" ];
  "Lib_OVMCodec.decodeEVMAccount" -> "Lib_RLPReader.readUint256" [ color = "orange" ];
  "Lib_OVMCodec.decodeEVMAccount" -> "Lib_RLPReader.readBytes32" [ color = "orange" ];
  "Lib_OVMCodec.decodeEVMAccount" -> "Lib_RLPReader.readBytes32" [ color = "orange" ];
  "Lib_RLPReader.readList" -> "Lib_RLPReader._decodeLength" [ color = "green" ];
  "Lib_RLPReader.readList" -> "Lib_RLPReader._decodeLength" [ color = "green" ];
  "Lib_RLPReader.readList" -> "Lib_RLPReader.readList" [ color = "green" ];
  "Lib_RLPReader.readList" -> "Lib_RLPReader.toRLPItem" [ color = "green" ];
  "Lib_RLPReader.readBytes" -> "Lib_RLPReader._decodeLength" [ color = "green" ];
  "Lib_RLPReader.readBytes" -> "Lib_RLPReader._copy" [ color = "green" ];
  "Lib_RLPReader.readBytes" -> "Lib_RLPReader.readBytes" [ color = "green" ];
  "Lib_RLPReader.readBytes" -> "Lib_RLPReader.toRLPItem" [ color = "green" ];
  "Lib_RLPReader.readString" -> "Lib_RLPReader.readBytes" [ color = "green" ];
  "Lib_RLPReader.readString" -> "Lib_RLPReader.readString" [ color = "green" ];
  "Lib_RLPReader.readString" -> "Lib_RLPReader.toRLPItem" [ color = "green" ];
  "Lib_RLPReader.readBytes32" -> "Lib_RLPReader._decodeLength" [ color = "green" ];
  "Lib_RLPReader.readBytes32" -> "Lib_RLPReader.readBytes32" [ color = "green" ];
  "Lib_RLPReader.readBytes32" -> "Lib_RLPReader.toRLPItem" [ color = "green" ];
  "Lib_RLPReader.readUint256" -> "Lib_RLPReader.readBytes32" [ color = "green" ];
  "Lib_RLPReader.readUint256" -> "Lib_RLPReader.readUint256" [ color = "green" ];
  "Lib_RLPReader.readUint256" -> "Lib_RLPReader.toRLPItem" [ color = "green" ];
  "Lib_RLPReader.readBool" -> "Lib_RLPReader.readBool" [ color = "green" ];
  "Lib_RLPReader.readBool" -> "Lib_RLPReader.toRLPItem" [ color = "green" ];
  "Lib_RLPReader.readAddress" -> "Lib_RLPReader.readUint256" [ color = "green" ];
  "Lib_RLPReader.readAddress" -> "Lib_RLPReader.readAddress" [ color = "green" ];
  "Lib_RLPReader.readAddress" -> "Lib_RLPReader.toRLPItem" [ color = "green" ];
  "Lib_RLPReader.readRawBytes" -> "Lib_RLPReader._copy" [ color = "green" ];
  "Lib_RLPReader._copy" -> "Lib_RLPReader._copy" [ color = "green" ];
  "Lib_RLPWriter.writeBytes" -> "Lib_BytesUtils.concat" [ color = "orange" ];
  "Lib_RLPWriter.writeBytes" -> "Lib_RLPWriter._writeLength" [ color = "green" ];
  "Lib_RLPWriter.writeList" -> "Lib_RLPWriter._flatten" [ color = "green" ];
  "Lib_RLPWriter.writeList" -> "Lib_BytesUtils.concat" [ color = "orange" ];
  "Lib_RLPWriter.writeList" -> "Lib_RLPWriter._writeLength" [ color = "green" ];
  "Lib_RLPWriter.writeString" -> "Lib_RLPWriter.writeBytes" [ color = "green" ];
  "Lib_RLPWriter.writeAddress" -> "Lib_RLPWriter.writeBytes" [ color = "green" ];
  "Lib_RLPWriter.writeUint" -> "Lib_RLPWriter.writeBytes" [ color = "green" ];
  "Lib_RLPWriter.writeUint" -> "Lib_RLPWriter._toBinary" [ color = "green" ];
  "Lib_RLPWriter._flatten" -> "Lib_RLPWriter._memcpy" [ color = "green" ];
  "Lib_BytesUtils.slice" -> "Lib_BytesUtils.slice" [ color = "green" ];
  "Lib_BytesUtils.toUint256" -> "Lib_BytesUtils.toBytes32" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeCALL" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeDELEGATECALL" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeCREATE" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeEXTCODESIZE" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeCHAINID" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeCALLER" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeADDRESS" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeGETNONCE" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeSETNONCE" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeCREATEEOA" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeREVERT" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeREQUIRE" -> "Lib_SafeExecutionManagerWrapper.safeREVERT" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeSLOAD" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper.safeSSTORE" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" -> "Lib_SafeExecutionManagerWrapper._safeExecutionManagerInteraction" [ color = "green" ];
  "Lib_ECDSAUtils.recover" -> "Lib_ECDSAUtils.getMessageHash" [ color = "green" ];
  "Lib_ECDSAUtils.getMessageHash" -> "Lib_ECDSAUtils.getEthSignedMessageHash" [ color = "green" ];
  "Lib_ECDSAUtils.getMessageHash" -> "Lib_ECDSAUtils.getNativeMessageHash" [ color = "green" ];
  "Lib_SafeMathWrapper.add" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "Lib_SafeMathWrapper.sub" -> "Lib_SafeMathWrapper.sub" [ color = "green" ];
  "Lib_SafeMathWrapper.sub" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "Lib_SafeMathWrapper.mul" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "Lib_SafeMathWrapper.div" -> "Lib_SafeMathWrapper.div" [ color = "green" ];
  "Lib_SafeMathWrapper.div" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "Lib_SafeMathWrapper.mod" -> "Lib_SafeMathWrapper.mod" [ color = "green" ];
  "Lib_SafeMathWrapper.mod" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "OVM_ProxyEOA.<Constructor>" -> "OVM_ProxyEOA._setImplementation" [ color = "green" ];
  "OVM_ProxyEOA.<Fallback>" -> "Lib_SafeExecutionManagerWrapper.safeDELEGATECALL" [ color = "orange" ];
  "OVM_ProxyEOA.<Fallback>" -> "OVM_ProxyEOA.getImplementation" [ color = "green" ];
  "OVM_ProxyEOA.<Fallback>" -> "Lib_SafeExecutionManagerWrapper.safeREVERT" [ color = "orange" ];
  "OVM_ProxyEOA.upgrade" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "OVM_ProxyEOA.upgrade" -> "Lib_SafeExecutionManagerWrapper.safeADDRESS" [ color = "orange" ];
  "OVM_ProxyEOA.upgrade" -> "Lib_SafeExecutionManagerWrapper.safeCALLER" [ color = "orange" ];
  "OVM_ProxyEOA.upgrade" -> "OVM_ProxyEOA._setImplementation" [ color = "green" ];
  "OVM_ProxyEOA.getImplementation" -> "Lib_SafeExecutionManagerWrapper.safeSLOAD" [ color = "orange" ];
  "OVM_ProxyEOA._setImplementation" -> "Lib_SafeExecutionManagerWrapper.safeSSTORE" [ color = "orange" ];
  "OVM_BaseCrossDomainMessenger.sendMessage" -> "OVM_BaseCrossDomainMessenger._getXDomainCalldata" [ color = "green" ];
  "OVM_BaseCrossDomainMessenger.sendMessage" -> "OVM_BaseCrossDomainMessenger._sendXDomainMessage" [ color = "green" ];
  "OVM_L1CrossDomainMessenger.onlyRelayer" -> "OVM_L1CrossDomainMessenger.resolve" [ color = "green" ];
  "OVM_L1CrossDomainMessenger.relayMessage" -> "OVM_BaseCrossDomainMessenger._getXDomainCalldata" [ color = "green" ];
  "OVM_L1CrossDomainMessenger.relayMessage" -> "OVM_L1CrossDomainMessenger._verifyXDomainMessage" [ color = "green" ];
  "OVM_L1CrossDomainMessenger.relayMessage" -> "_target.call" [ color = "orange" ];
  "OVM_L1CrossDomainMessenger.replayMessage" -> "OVM_BaseCrossDomainMessenger._getXDomainCalldata" [ color = "green" ];
  "OVM_L1CrossDomainMessenger.replayMessage" -> "OVM_BaseCrossDomainMessenger._sendXDomainMessage" [ color = "green" ];
  "OVM_L1CrossDomainMessenger._verifyXDomainMessage" -> "OVM_L1CrossDomainMessenger._verifyStateRootProof" [ color = "green" ];
  "OVM_L1CrossDomainMessenger._verifyXDomainMessage" -> "OVM_L1CrossDomainMessenger._verifyStorageProof" [ color = "green" ];
  "OVM_L1CrossDomainMessenger._verifyStateRootProof" -> "OVM_L1CrossDomainMessenger.resolve" [ color = "green" ];
  "OVM_L1CrossDomainMessenger._verifyStateRootProof" -> "iOVM_StateCommitmentChain.insideFraudProofWindow" [ color = "orange" ];
  "OVM_L1CrossDomainMessenger._verifyStateRootProof" -> "iOVM_StateCommitmentChain.verifyStateCommitment" [ color = "orange" ];
  "OVM_L1CrossDomainMessenger._verifyStorageProof" -> "OVM_L1CrossDomainMessenger.resolve" [ color = "green" ];
  "OVM_L1CrossDomainMessenger._verifyStorageProof" -> "Lib_SecureMerkleTrie.get" [ color = "orange" ];
  "OVM_L1CrossDomainMessenger._verifyStorageProof" -> "Lib_OVMCodec.decodeEVMAccount" [ color = "orange" ];
  "OVM_L1CrossDomainMessenger._verifyStorageProof" -> "Lib_SecureMerkleTrie.verifyInclusionProof" [ color = "orange" ];
  "OVM_BaseCrossDomainMessenger._sendXDomainMessage" -> "OVM_L1CrossDomainMessenger.resolve" [ color = "green" ];
  "OVM_BaseCrossDomainMessenger._sendXDomainMessage" -> "OVM_L1CrossDomainMessenger.resolve" [ color = "green" ];
  "Lib_AddressResolver.resolve" -> "Lib_AddressManager.getAddress" [ color = "orange" ];
  "Lib_AddressManager.setAddress" -> "Lib_AddressManager._getNameHash" [ color = "green" ];
  "Lib_AddressManager.getAddress" -> "Lib_AddressManager._getNameHash" [ color = "green" ];
  "Lib_SecureMerkleTrie.verifyInclusionProof" -> "Lib_SecureMerkleTrie._getSecureKey" [ color = "green" ];
  "Lib_SecureMerkleTrie.verifyInclusionProof" -> "Lib_MerkleTrie.verifyInclusionProof" [ color = "orange" ];
  "Lib_SecureMerkleTrie.verifyExclusionProof" -> "Lib_SecureMerkleTrie._getSecureKey" [ color = "green" ];
  "Lib_SecureMerkleTrie.verifyExclusionProof" -> "Lib_MerkleTrie.verifyExclusionProof" [ color = "orange" ];
  "Lib_SecureMerkleTrie.update" -> "Lib_SecureMerkleTrie._getSecureKey" [ color = "green" ];
  "Lib_SecureMerkleTrie.update" -> "Lib_MerkleTrie.update" [ color = "orange" ];
  "Lib_SecureMerkleTrie.get" -> "Lib_SecureMerkleTrie._getSecureKey" [ color = "green" ];
  "Lib_SecureMerkleTrie.get" -> "Lib_MerkleTrie.get" [ color = "orange" ];
  "Lib_SecureMerkleTrie.getSingleNodeRootHash" -> "Lib_SecureMerkleTrie._getSecureKey" [ color = "green" ];
  "Lib_SecureMerkleTrie.getSingleNodeRootHash" -> "Lib_MerkleTrie.getSingleNodeRootHash" [ color = "orange" ];
  "Lib_MerkleTrie.verifyInclusionProof" -> "Lib_MerkleTrie.get" [ color = "green" ];
  "Lib_MerkleTrie.verifyInclusionProof" -> "Lib_BytesUtils.equal" [ color = "orange" ];
  "Lib_MerkleTrie.verifyExclusionProof" -> "Lib_MerkleTrie.get" [ color = "green" ];
  "Lib_MerkleTrie.update" -> "Lib_MerkleTrie.getSingleNodeRootHash" [ color = "green" ];
  "Lib_MerkleTrie.update" -> "Lib_MerkleTrie._parseProof" [ color = "green" ];
  "Lib_MerkleTrie.update" -> "Lib_MerkleTrie._walkNodePath" [ color = "green" ];
  "Lib_MerkleTrie.update" -> "Lib_MerkleTrie._getNewPath" [ color = "green" ];
  "Lib_MerkleTrie.update" -> "Lib_MerkleTrie._getUpdatedTrieRoot" [ color = "green" ];
  "Lib_MerkleTrie.get" -> "Lib_MerkleTrie._parseProof" [ color = "green" ];
  "Lib_MerkleTrie.get" -> "Lib_MerkleTrie._walkNodePath" [ color = "green" ];
  "Lib_MerkleTrie.get" -> "Lib_MerkleTrie._getNodeValue" [ color = "green" ];
  "Lib_MerkleTrie.getSingleNodeRootHash" -> "Lib_MerkleTrie._makeLeafNode" [ color = "green" ];
  "Lib_MerkleTrie.getSingleNodeRootHash" -> "Lib_BytesUtils.toNibbles" [ color = "orange" ];
  "Lib_MerkleTrie._walkNodePath" -> "Lib_BytesUtils.toNibbles" [ color = "orange" ];
  "Lib_MerkleTrie._walkNodePath" -> "Lib_BytesUtils.toBytes32" [ color = "orange" ];
  "Lib_MerkleTrie._walkNodePath" -> "Lib_MerkleTrie._getNodeID" [ color = "green" ];
  "Lib_MerkleTrie._walkNodePath" -> "Lib_MerkleTrie._getNodePath" [ color = "green" ];
  "Lib_MerkleTrie._walkNodePath" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._walkNodePath" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._walkNodePath" -> "Lib_MerkleTrie._getSharedNibbleLength" [ color = "green" ];
  "Lib_MerkleTrie._walkNodePath" -> "Lib_MerkleTrie._getNodeID" [ color = "green" ];
  "Lib_MerkleTrie._walkNodePath" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getNodeType" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._makeLeafNode" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getNodeKey" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._editBranchValue" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._makeLeafNode" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getNodeKey" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getSharedNibbleLength" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._makeExtensionNode" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getNodeHash" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._makeEmptyBranchNode" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._editBranchValue" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getNodeValue" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._makeLeafNode" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getNodeValue" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._editBranchIndex" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getNodeHash" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._makeExtensionNode" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getNodeValue" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._editBranchIndex" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getNodeHash" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._editBranchIndex" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._getNodeValue" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._editBranchValue" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._makeLeafNode" [ color = "green" ];
  "Lib_MerkleTrie._getNewPath" -> "Lib_MerkleTrie._joinNodeArrays" [ color = "green" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" -> "Lib_BytesUtils.toNibbles" [ color = "orange" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" -> "Lib_MerkleTrie._getNodeType" [ color = "green" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" -> "Lib_MerkleTrie._getNodeKey" [ color = "green" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" -> "Lib_MerkleTrie._getNodeKey" [ color = "green" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" -> "Lib_MerkleTrie._makeExtensionNode" [ color = "green" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" -> "Lib_MerkleTrie._editBranchIndex" [ color = "green" ];
  "Lib_MerkleTrie._getUpdatedTrieRoot" -> "Lib_MerkleTrie._getNodeHash" [ color = "green" ];
  "Lib_MerkleTrie._parseProof" -> "Lib_RLPReader.readList" [ color = "orange" ];
  "Lib_MerkleTrie._parseProof" -> "Lib_RLPReader.readBytes" [ color = "orange" ];
  "Lib_MerkleTrie._parseProof" -> "Lib_RLPReader.readList" [ color = "orange" ];
  "Lib_MerkleTrie._getNodeID" -> "Lib_RLPReader.readRawBytes" [ color = "orange" ];
  "Lib_MerkleTrie._getNodeID" -> "Lib_RLPReader.readBytes" [ color = "orange" ];
  "Lib_MerkleTrie._getNodeID" -> "Lib_BytesUtils.toBytes32" [ color = "orange" ];
  "Lib_MerkleTrie._getNodePath" -> "Lib_BytesUtils.toNibbles" [ color = "orange" ];
  "Lib_MerkleTrie._getNodePath" -> "Lib_RLPReader.readBytes" [ color = "orange" ];
  "Lib_MerkleTrie._getNodeKey" -> "Lib_MerkleTrie._removeHexPrefix" [ color = "green" ];
  "Lib_MerkleTrie._getNodeKey" -> "Lib_MerkleTrie._getNodePath" [ color = "green" ];
  "Lib_MerkleTrie._getNodeValue" -> "Lib_RLPReader.readBytes" [ color = "orange" ];
  "Lib_MerkleTrie._getNodeType" -> "Lib_MerkleTrie._getNodePath" [ color = "green" ];
  "Lib_MerkleTrie._makeNode" -> "Lib_RLPWriter.writeList" [ color = "orange" ];
  "Lib_MerkleTrie._makeNode" -> "Lib_RLPReader.readList" [ color = "orange" ];
  "Lib_MerkleTrie._makeNode" -> "Lib_RLPReader.readRawBytes" [ color = "orange" ];
  "Lib_MerkleTrie._makeNode" -> "Lib_MerkleTrie._makeNode" [ color = "green" ];
  "Lib_MerkleTrie._makeExtensionNode" -> "Lib_MerkleTrie._addHexPrefix" [ color = "green" ];
  "Lib_MerkleTrie._makeExtensionNode" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_MerkleTrie._makeExtensionNode" -> "Lib_BytesUtils.fromNibbles" [ color = "orange" ];
  "Lib_MerkleTrie._makeExtensionNode" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_MerkleTrie._makeExtensionNode" -> "Lib_MerkleTrie._makeNode" [ color = "green" ];
  "Lib_MerkleTrie._makeLeafNode" -> "Lib_MerkleTrie._addHexPrefix" [ color = "green" ];
  "Lib_MerkleTrie._makeLeafNode" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_MerkleTrie._makeLeafNode" -> "Lib_BytesUtils.fromNibbles" [ color = "orange" ];
  "Lib_MerkleTrie._makeLeafNode" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_MerkleTrie._makeLeafNode" -> "Lib_MerkleTrie._makeNode" [ color = "green" ];
  "Lib_MerkleTrie._makeEmptyBranchNode" -> "Lib_MerkleTrie._makeNode" [ color = "green" ];
  "Lib_MerkleTrie._editBranchValue" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_MerkleTrie._editBranchValue" -> "Lib_RLPReader.toRLPItem" [ color = "orange" ];
  "Lib_MerkleTrie._editBranchValue" -> "Lib_MerkleTrie._makeNode" [ color = "green" ];
  "Lib_MerkleTrie._editBranchIndex" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "Lib_MerkleTrie._editBranchIndex" -> "Lib_RLPReader.toRLPItem" [ color = "orange" ];
  "Lib_MerkleTrie._editBranchIndex" -> "Lib_MerkleTrie._makeNode" [ color = "green" ];
  "Lib_MerkleTrie._addHexPrefix" -> "Lib_BytesUtils.concat" [ color = "orange" ];
  "Lib_MerkleTrie._removeHexPrefix" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "Lib_MerkleTrie._removeHexPrefix" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "OVM_L2CrossDomainMessenger.relayMessage" -> "OVM_L2CrossDomainMessenger._verifyXDomainMessage" [ color = "green" ];
  "OVM_L2CrossDomainMessenger.relayMessage" -> "OVM_BaseCrossDomainMessenger._getXDomainCalldata" [ color = "green" ];
  "OVM_L2CrossDomainMessenger.relayMessage" -> "_target.call" [ color = "orange" ];
  "OVM_L2CrossDomainMessenger._verifyXDomainMessage" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_L2CrossDomainMessenger._verifyXDomainMessage" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_BaseCrossDomainMessenger._sendXDomainMessage" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_CanonicalTransactionChain.batches" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_CanonicalTransactionChain.queue" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_CanonicalTransactionChain.getTotalElements" -> "OVM_CanonicalTransactionChain._getBatchExtraData" [ color = "green" ];
  "OVM_CanonicalTransactionChain.getTotalBatches" -> "OVM_CanonicalTransactionChain.batches" [ color = "green" ];
  "OVM_CanonicalTransactionChain.getNextQueueIndex" -> "OVM_CanonicalTransactionChain._getBatchExtraData" [ color = "green" ];
  "OVM_CanonicalTransactionChain.getQueueElement" -> "OVM_CanonicalTransactionChain.queue" [ color = "green" ];
  "OVM_CanonicalTransactionChain.getQueueElement" -> "OVM_CanonicalTransactionChain.queue" [ color = "green" ];
  "OVM_CanonicalTransactionChain.getQueueElement" -> "Lib_OVMCodec.QueueElement" [ color = "orange" ];
  "OVM_CanonicalTransactionChain.getNumPendingQueueElements" -> "OVM_CanonicalTransactionChain.getQueueLength" [ color = "green" ];
  "OVM_CanonicalTransactionChain.getNumPendingQueueElements" -> "OVM_CanonicalTransactionChain.getNextQueueIndex" [ color = "green" ];
  "OVM_CanonicalTransactionChain.getQueueLength" -> "OVM_CanonicalTransactionChain.queue" [ color = "green" ];
  "OVM_CanonicalTransactionChain.enqueue" -> "OVM_CanonicalTransactionChain.queue" [ color = "green" ];
  "OVM_CanonicalTransactionChain.enqueue" -> "OVM_CanonicalTransactionChain.queue" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" -> "Lib_Math.min" [ color = "orange" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" -> "OVM_CanonicalTransactionChain.getNumPendingQueueElements" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" -> "OVM_CanonicalTransactionChain.getNextQueueIndex" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" -> "OVM_CanonicalTransactionChain.getQueueElement" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" -> "OVM_CanonicalTransactionChain._getQueueLeafHash" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" -> "OVM_CanonicalTransactionChain.getQueueElement" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" -> "OVM_CanonicalTransactionChain._appendBatch" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" -> "Lib_MerkleTree.getMerkleRoot" [ color = "orange" ];
  "OVM_CanonicalTransactionChain.appendQueueBatch" -> "OVM_CanonicalTransactionChain.getTotalElements" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain.getTotalElements" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain.getQueueLength" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain.getNextQueueIndex" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain._getBatchContext" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain._validateFirstBatchContext" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain._validateNextBatchContext" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain._getSequencerLeafHash" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain._getQueueLeafHash" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain._validateFinalBatchContext" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain.getQueueElement" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain._appendBatch" [ color = "green" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "Lib_MerkleTree.getMerkleRoot" [ color = "orange" ];
  "OVM_CanonicalTransactionChain.appendSequencerBatch" -> "OVM_CanonicalTransactionChain.getTotalElements" [ color = "green" ];
  "OVM_CanonicalTransactionChain.verifyTransaction" -> "OVM_CanonicalTransactionChain._verifySequencerTransaction" [ color = "green" ];
  "OVM_CanonicalTransactionChain.verifyTransaction" -> "OVM_CanonicalTransactionChain._verifyQueueTransaction" [ color = "green" ];
  "OVM_CanonicalTransactionChain._getBatchExtraData" -> "OVM_CanonicalTransactionChain.batches" [ color = "green" ];
  "OVM_CanonicalTransactionChain._getQueueLeafHash" -> "OVM_CanonicalTransactionChain._hashTransactionChainElement" [ color = "green" ];
  "OVM_CanonicalTransactionChain._getQueueLeafHash" -> "Lib_OVMCodec.TransactionChainElement" [ color = "orange" ];
  "OVM_CanonicalTransactionChain._getQueueLength" -> "OVM_CanonicalTransactionChain.queue" [ color = "green" ];
  "OVM_CanonicalTransactionChain._appendBatch" -> "OVM_CanonicalTransactionChain._getBatchExtraData" [ color = "green" ];
  "OVM_CanonicalTransactionChain._appendBatch" -> "Lib_OVMCodec.ChainBatchHeader" [ color = "orange" ];
  "OVM_CanonicalTransactionChain._appendBatch" -> "OVM_CanonicalTransactionChain.batches" [ color = "green" ];
  "OVM_CanonicalTransactionChain._appendBatch" -> "Lib_OVMCodec.hashBatchHeader" [ color = "orange" ];
  "OVM_CanonicalTransactionChain._appendBatch" -> "OVM_CanonicalTransactionChain._makeBatchExtraData" [ color = "green" ];
  "OVM_CanonicalTransactionChain._appendBatch" -> "OVM_CanonicalTransactionChain.batches" [ color = "green" ];
  "OVM_CanonicalTransactionChain._validateFirstBatchContext" -> "OVM_CanonicalTransactionChain.getTotalElements" [ color = "green" ];
  "OVM_CanonicalTransactionChain._validateFirstBatchContext" -> "OVM_CanonicalTransactionChain._getBatchExtraData" [ color = "green" ];
  "OVM_CanonicalTransactionChain._validateNextBatchContext" -> "OVM_CanonicalTransactionChain.getQueueLength" [ color = "green" ];
  "OVM_CanonicalTransactionChain._validateNextBatchContext" -> "OVM_CanonicalTransactionChain.getQueueElement" [ color = "green" ];
  "OVM_CanonicalTransactionChain._verifySequencerTransaction" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_CanonicalTransactionChain._verifySequencerTransaction" -> "OVM_ExecutionManager.getMaxTransactionGasLimit" [ color = "orange" ];
  "OVM_CanonicalTransactionChain._verifySequencerTransaction" -> "OVM_CanonicalTransactionChain._getSequencerLeafHash" [ color = "green" ];
  "OVM_CanonicalTransactionChain._verifySequencerTransaction" -> "OVM_CanonicalTransactionChain._verifyElement" [ color = "green" ];
  "OVM_CanonicalTransactionChain._verifySequencerTransaction" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_CanonicalTransactionChain._verifyQueueTransaction" -> "OVM_CanonicalTransactionChain._getQueueLeafHash" [ color = "green" ];
  "OVM_CanonicalTransactionChain._verifyQueueTransaction" -> "OVM_CanonicalTransactionChain._verifyElement" [ color = "green" ];
  "OVM_CanonicalTransactionChain._verifyQueueTransaction" -> "OVM_CanonicalTransactionChain.getQueueElement" [ color = "green" ];
  "OVM_CanonicalTransactionChain._verifyElement" -> "Lib_OVMCodec.hashBatchHeader" [ color = "orange" ];
  "OVM_CanonicalTransactionChain._verifyElement" -> "OVM_CanonicalTransactionChain.batches" [ color = "green" ];
  "OVM_CanonicalTransactionChain._verifyElement" -> "Lib_MerkleTree.verify" [ color = "orange" ];
  "Lib_MerkleTree.verify" -> "Lib_MerkleTree._ceilLog2" [ color = "green" ];
  "OVM_ExecutionManager.<Constructor>" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_ExecutionManager.notStatic" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager.run" -> "iOVM_StateManager.isAuthenticated" [ color = "orange" ];
  "OVM_ExecutionManager.run" -> "OVM_ExecutionManager._initContext" [ color = "green" ];
  "OVM_ExecutionManager.run" -> "OVM_ExecutionManager._isValidGasLimit" [ color = "green" ];
  "OVM_ExecutionManager.run" -> "OVM_ExecutionManager.ovmCALL" [ color = "green" ];
  "OVM_ExecutionManager.run" -> "OVM_ExecutionManager._resetContext" [ color = "green" ];
  "OVM_ExecutionManager.ovmREVERT" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATE" -> "OVM_ExecutionManager.ovmADDRESS" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATE" -> "OVM_ExecutionManager._checkDeployerAllowed" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATE" -> "Lib_EthUtils.getAddressForCREATE" [ color = "orange" ];
  "OVM_ExecutionManager.ovmCREATE" -> "OVM_ExecutionManager._getAccountNonce" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATE" -> "OVM_ExecutionManager._createContract" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATE2" -> "OVM_ExecutionManager.ovmADDRESS" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATE2" -> "OVM_ExecutionManager._checkDeployerAllowed" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATE2" -> "Lib_EthUtils.getAddressForCREATE2" [ color = "orange" ];
  "OVM_ExecutionManager.ovmCREATE2" -> "OVM_ExecutionManager._createContract" [ color = "green" ];
  "OVM_ExecutionManager.ovmGETNONCE" -> "OVM_ExecutionManager._getAccountNonce" [ color = "green" ];
  "OVM_ExecutionManager.ovmGETNONCE" -> "OVM_ExecutionManager.ovmADDRESS" [ color = "green" ];
  "OVM_ExecutionManager.ovmSETNONCE" -> "OVM_ExecutionManager._setAccountNonce" [ color = "green" ];
  "OVM_ExecutionManager.ovmSETNONCE" -> "OVM_ExecutionManager.ovmADDRESS" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATEEOA" -> "OVM_ExecutionManager.ovmREVERT" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATEEOA" -> "OVM_ExecutionManager._hasEmptyAccount" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATEEOA" -> "OVM_ExecutionManager._initPendingAccount" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATEEOA" -> "OVM_ExecutionManager._commitPendingAccount" [ color = "green" ];
  "OVM_ExecutionManager.ovmCREATEEOA" -> "Lib_EthUtils.getCode" [ color = "orange" ];
  "OVM_ExecutionManager.ovmCREATEEOA" -> "OVM_ExecutionManager._setAccountNonce" [ color = "green" ];
  "OVM_ExecutionManager.ovmCALL" -> "OVM_ExecutionManager._callContract" [ color = "green" ];
  "OVM_ExecutionManager.ovmSTATICCALL" -> "OVM_ExecutionManager._callContract" [ color = "green" ];
  "OVM_ExecutionManager.ovmDELEGATECALL" -> "OVM_ExecutionManager._callContract" [ color = "green" ];
  "OVM_ExecutionManager.ovmSLOAD" -> "OVM_ExecutionManager.ovmADDRESS" [ color = "green" ];
  "OVM_ExecutionManager.ovmSLOAD" -> "OVM_ExecutionManager._getContractStorage" [ color = "green" ];
  "OVM_ExecutionManager.ovmSSTORE" -> "OVM_ExecutionManager.ovmADDRESS" [ color = "green" ];
  "OVM_ExecutionManager.ovmSSTORE" -> "OVM_ExecutionManager._putContractStorage" [ color = "green" ];
  "OVM_ExecutionManager.ovmEXTCODECOPY" -> "Lib_EthUtils.getCode" [ color = "orange" ];
  "OVM_ExecutionManager.ovmEXTCODECOPY" -> "OVM_ExecutionManager._getAccountEthAddress" [ color = "green" ];
  "OVM_ExecutionManager.ovmEXTCODESIZE" -> "Lib_EthUtils.getCodeSize" [ color = "orange" ];
  "OVM_ExecutionManager.ovmEXTCODESIZE" -> "OVM_ExecutionManager._getAccountEthAddress" [ color = "green" ];
  "OVM_ExecutionManager.ovmEXTCODEHASH" -> "Lib_EthUtils.getCodeHash" [ color = "orange" ];
  "OVM_ExecutionManager.ovmEXTCODEHASH" -> "OVM_ExecutionManager._getAccountEthAddress" [ color = "green" ];
  "OVM_ExecutionManager.safeCREATE" -> "OVM_ExecutionManager._hasEmptyAccount" [ color = "green" ];
  "OVM_ExecutionManager.safeCREATE" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager.safeCREATE" -> "iOVM_SafetyChecker.isBytecodeSafe" [ color = "orange" ];
  "OVM_ExecutionManager.safeCREATE" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager.safeCREATE" -> "OVM_ExecutionManager._initPendingAccount" [ color = "green" ];
  "OVM_ExecutionManager.safeCREATE" -> "Lib_EthUtils.createContract" [ color = "orange" ];
  "OVM_ExecutionManager.safeCREATE" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager.safeCREATE" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager.safeCREATE" -> "Lib_EthUtils.getCode" [ color = "orange" ];
  "OVM_ExecutionManager.safeCREATE" -> "iOVM_SafetyChecker.isBytecodeSafe" [ color = "orange" ];
  "OVM_ExecutionManager.safeCREATE" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager.safeCREATE" -> "OVM_ExecutionManager._commitPendingAccount" [ color = "green" ];
  "OVM_ExecutionManager.safeCREATE" -> "Lib_EthUtils.getCodeHash" [ color = "orange" ];
  "OVM_ExecutionManager._checkDeployerAllowed" -> "OVM_ExecutionManager.ovmCALL" [ color = "green" ];
  "OVM_ExecutionManager._checkDeployerAllowed" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager._createContract" -> "OVM_ExecutionManager._setAccountNonce" [ color = "green" ];
  "OVM_ExecutionManager._createContract" -> "OVM_ExecutionManager.ovmADDRESS" [ color = "green" ];
  "OVM_ExecutionManager._createContract" -> "OVM_ExecutionManager._getAccountNonce" [ color = "green" ];
  "OVM_ExecutionManager._createContract" -> "OVM_ExecutionManager.ovmADDRESS" [ color = "green" ];
  "OVM_ExecutionManager._createContract" -> "OVM_ExecutionManager._handleExternalInteraction" [ color = "green" ];
  "OVM_ExecutionManager._callContract" -> "OVM_ExecutionManager._getAccountEthAddress" [ color = "green" ];
  "OVM_ExecutionManager._callContract" -> "OVM_ExecutionManager._handleExternalInteraction" [ color = "green" ];
  "OVM_ExecutionManager._handleExternalInteraction" -> "OVM_ExecutionManager._switchMessageContext" [ color = "green" ];
  "OVM_ExecutionManager._handleExternalInteraction" -> "OVM_ExecutionManager._getNuisanceGasLimit" [ color = "green" ];
  "OVM_ExecutionManager._handleExternalInteraction" -> "OVM_ExecutionManager._switchMessageContext" [ color = "green" ];
  "OVM_ExecutionManager._handleExternalInteraction" -> "OVM_ExecutionManager._decodeRevertData" [ color = "green" ];
  "OVM_ExecutionManager._handleExternalInteraction" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager._hasAccount" -> "OVM_ExecutionManager._checkAccountLoad" [ color = "green" ];
  "OVM_ExecutionManager._hasAccount" -> "iOVM_StateManager.hasAccount" [ color = "orange" ];
  "OVM_ExecutionManager._hasEmptyAccount" -> "OVM_ExecutionManager._checkAccountLoad" [ color = "green" ];
  "OVM_ExecutionManager._hasEmptyAccount" -> "iOVM_StateManager.hasEmptyAccount" [ color = "orange" ];
  "OVM_ExecutionManager._setAccountNonce" -> "OVM_ExecutionManager._checkAccountChange" [ color = "green" ];
  "OVM_ExecutionManager._setAccountNonce" -> "iOVM_StateManager.setAccountNonce" [ color = "orange" ];
  "OVM_ExecutionManager._getAccountNonce" -> "OVM_ExecutionManager._checkAccountLoad" [ color = "green" ];
  "OVM_ExecutionManager._getAccountNonce" -> "iOVM_StateManager.getAccountNonce" [ color = "orange" ];
  "OVM_ExecutionManager._getAccountEthAddress" -> "OVM_ExecutionManager._checkAccountLoad" [ color = "green" ];
  "OVM_ExecutionManager._getAccountEthAddress" -> "iOVM_StateManager.getAccountEthAddress" [ color = "orange" ];
  "OVM_ExecutionManager._initPendingAccount" -> "OVM_ExecutionManager._checkAccountLoad" [ color = "green" ];
  "OVM_ExecutionManager._initPendingAccount" -> "iOVM_StateManager.initPendingAccount" [ color = "orange" ];
  "OVM_ExecutionManager._commitPendingAccount" -> "OVM_ExecutionManager._checkAccountChange" [ color = "green" ];
  "OVM_ExecutionManager._commitPendingAccount" -> "iOVM_StateManager.commitPendingAccount" [ color = "orange" ];
  "OVM_ExecutionManager._getContractStorage" -> "OVM_ExecutionManager._checkContractStorageLoad" [ color = "green" ];
  "OVM_ExecutionManager._getContractStorage" -> "iOVM_StateManager.getContractStorage" [ color = "orange" ];
  "OVM_ExecutionManager._putContractStorage" -> "OVM_ExecutionManager._getContractStorage" [ color = "green" ];
  "OVM_ExecutionManager._putContractStorage" -> "OVM_ExecutionManager._checkContractStorageChange" [ color = "green" ];
  "OVM_ExecutionManager._putContractStorage" -> "iOVM_StateManager.putContractStorage" [ color = "orange" ];
  "OVM_ExecutionManager._checkAccountLoad" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager._checkAccountLoad" -> "iOVM_StateManager.hasAccount" [ color = "orange" ];
  "OVM_ExecutionManager._checkAccountLoad" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager._checkAccountLoad" -> "iOVM_StateManager.testAndSetAccountLoaded" [ color = "orange" ];
  "OVM_ExecutionManager._checkAccountLoad" -> "OVM_ExecutionManager._useNuisanceGas" [ color = "green" ];
  "OVM_ExecutionManager._checkAccountLoad" -> "Lib_EthUtils.getCodeSize" [ color = "orange" ];
  "OVM_ExecutionManager._checkAccountLoad" -> "OVM_ExecutionManager._getAccountEthAddress" [ color = "green" ];
  "OVM_ExecutionManager._checkAccountChange" -> "OVM_ExecutionManager._checkAccountLoad" [ color = "green" ];
  "OVM_ExecutionManager._checkAccountChange" -> "iOVM_StateManager.testAndSetAccountChanged" [ color = "orange" ];
  "OVM_ExecutionManager._checkAccountChange" -> "iOVM_StateManager.incrementTotalUncommittedAccounts" [ color = "orange" ];
  "OVM_ExecutionManager._checkAccountChange" -> "OVM_ExecutionManager._useNuisanceGas" [ color = "green" ];
  "OVM_ExecutionManager._checkAccountChange" -> "Lib_EthUtils.getCodeSize" [ color = "orange" ];
  "OVM_ExecutionManager._checkAccountChange" -> "OVM_ExecutionManager._getAccountEthAddress" [ color = "green" ];
  "OVM_ExecutionManager._checkContractStorageLoad" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager._checkContractStorageLoad" -> "iOVM_StateManager.hasContractStorage" [ color = "orange" ];
  "OVM_ExecutionManager._checkContractStorageLoad" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager._checkContractStorageLoad" -> "iOVM_StateManager.testAndSetContractStorageLoaded" [ color = "orange" ];
  "OVM_ExecutionManager._checkContractStorageLoad" -> "OVM_ExecutionManager._useNuisanceGas" [ color = "green" ];
  "OVM_ExecutionManager._checkContractStorageChange" -> "OVM_ExecutionManager._checkContractStorageLoad" [ color = "green" ];
  "OVM_ExecutionManager._checkContractStorageChange" -> "iOVM_StateManager.testAndSetContractStorageChanged" [ color = "orange" ];
  "OVM_ExecutionManager._checkContractStorageChange" -> "OVM_ExecutionManager._checkAccountChange" [ color = "green" ];
  "OVM_ExecutionManager._checkContractStorageChange" -> "iOVM_StateManager.incrementTotalUncommittedContractStorage" [ color = "orange" ];
  "OVM_ExecutionManager._checkContractStorageChange" -> "OVM_ExecutionManager._useNuisanceGas" [ color = "green" ];
  "OVM_ExecutionManager._revertWithFlag" -> "OVM_ExecutionManager._encodeRevertData" [ color = "green" ];
  "OVM_ExecutionManager._revertWithFlag" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager._useNuisanceGas" -> "OVM_ExecutionManager._revertWithFlag" [ color = "green" ];
  "OVM_ExecutionManager._checkNeedsNewEpoch" -> "OVM_ExecutionManager._getGasMetadata" [ color = "green" ];
  "OVM_ExecutionManager._checkNeedsNewEpoch" -> "OVM_ExecutionManager._putGasMetadata" [ color = "green" ];
  "OVM_ExecutionManager._checkNeedsNewEpoch" -> "OVM_ExecutionManager._putGasMetadata" [ color = "green" ];
  "OVM_ExecutionManager._checkNeedsNewEpoch" -> "OVM_ExecutionManager._getGasMetadata" [ color = "green" ];
  "OVM_ExecutionManager._checkNeedsNewEpoch" -> "OVM_ExecutionManager._putGasMetadata" [ color = "green" ];
  "OVM_ExecutionManager._checkNeedsNewEpoch" -> "OVM_ExecutionManager._getGasMetadata" [ color = "green" ];
  "OVM_ExecutionManager._updateCumulativeGas" -> "OVM_ExecutionManager._putGasMetadata" [ color = "green" ];
  "OVM_ExecutionManager._updateCumulativeGas" -> "OVM_ExecutionManager._getGasMetadata" [ color = "green" ];
  "OVM_ExecutionManager._getGasMetadata" -> "OVM_ExecutionManager._getContractStorage" [ color = "green" ];
  "OVM_ExecutionManager._putGasMetadata" -> "OVM_ExecutionManager._putContractStorage" [ color = "green" ];
  "OVM_ExecutionManager._initContext" -> "OVM_ExecutionManager._getNuisanceGasLimit" [ color = "green" ];
  "Lib_EthUtils.getCode" -> "Lib_EthUtils.getCode" [ color = "green" ];
  "Lib_EthUtils.getCode" -> "Lib_EthUtils.getCodeSize" [ color = "green" ];
  "Lib_EthUtils.getAddressForCREATE" -> "Lib_RLPWriter.writeAddress" [ color = "orange" ];
  "Lib_EthUtils.getAddressForCREATE" -> "Lib_RLPWriter.writeUint" [ color = "orange" ];
  "Lib_EthUtils.getAddressForCREATE" -> "Lib_RLPWriter.writeList" [ color = "orange" ];
  "Lib_EthUtils.getAddressForCREATE" -> "Lib_Bytes32Utils.toAddress" [ color = "orange" ];
  "Lib_EthUtils.getAddressForCREATE2" -> "Lib_Bytes32Utils.toAddress" [ color = "orange" ];
  "OVM_DeployerWhitelist.onlyOwner" -> "Lib_Bytes32Utils.toAddress" [ color = "orange" ];
  "OVM_DeployerWhitelist.onlyOwner" -> "Lib_SafeExecutionManagerWrapper.safeSLOAD" [ color = "orange" ];
  "OVM_DeployerWhitelist.onlyOwner" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "OVM_DeployerWhitelist.onlyOwner" -> "Lib_SafeExecutionManagerWrapper.safeCALLER" [ color = "orange" ];
  "OVM_DeployerWhitelist.initialize" -> "Lib_Bytes32Utils.toBool" [ color = "orange" ];
  "OVM_DeployerWhitelist.initialize" -> "Lib_SafeExecutionManagerWrapper.safeSLOAD" [ color = "orange" ];
  "OVM_DeployerWhitelist.initialize" -> "Lib_SafeExecutionManagerWrapper.safeSSTORE" [ color = "orange" ];
  "OVM_DeployerWhitelist.initialize" -> "Lib_Bytes32Utils.fromBool" [ color = "orange" ];
  "OVM_DeployerWhitelist.initialize" -> "Lib_SafeExecutionManagerWrapper.safeSSTORE" [ color = "orange" ];
  "OVM_DeployerWhitelist.initialize" -> "Lib_Bytes32Utils.fromAddress" [ color = "orange" ];
  "OVM_DeployerWhitelist.initialize" -> "Lib_SafeExecutionManagerWrapper.safeSSTORE" [ color = "orange" ];
  "OVM_DeployerWhitelist.initialize" -> "Lib_Bytes32Utils.fromBool" [ color = "orange" ];
  "OVM_DeployerWhitelist.getOwner" -> "Lib_Bytes32Utils.toAddress" [ color = "orange" ];
  "OVM_DeployerWhitelist.getOwner" -> "Lib_SafeExecutionManagerWrapper.safeSLOAD" [ color = "orange" ];
  "OVM_DeployerWhitelist.setWhitelistedDeployer" -> "Lib_SafeExecutionManagerWrapper.safeSSTORE" [ color = "orange" ];
  "OVM_DeployerWhitelist.setWhitelistedDeployer" -> "Lib_Bytes32Utils.fromAddress" [ color = "orange" ];
  "OVM_DeployerWhitelist.setWhitelistedDeployer" -> "Lib_Bytes32Utils.fromBool" [ color = "orange" ];
  "OVM_DeployerWhitelist.setOwner" -> "Lib_SafeExecutionManagerWrapper.safeSSTORE" [ color = "orange" ];
  "OVM_DeployerWhitelist.setOwner" -> "Lib_Bytes32Utils.fromAddress" [ color = "orange" ];
  "OVM_DeployerWhitelist.setAllowArbitraryDeployment" -> "Lib_SafeExecutionManagerWrapper.safeSSTORE" [ color = "orange" ];
  "OVM_DeployerWhitelist.setAllowArbitraryDeployment" -> "Lib_Bytes32Utils.fromBool" [ color = "orange" ];
  "OVM_DeployerWhitelist.enableArbitraryContractDeployment" -> "OVM_DeployerWhitelist.setAllowArbitraryDeployment" [ color = "green" ];
  "OVM_DeployerWhitelist.enableArbitraryContractDeployment" -> "OVM_DeployerWhitelist.setOwner" [ color = "green" ];
  "OVM_DeployerWhitelist.isDeployerAllowed" -> "Lib_Bytes32Utils.toBool" [ color = "orange" ];
  "OVM_DeployerWhitelist.isDeployerAllowed" -> "Lib_SafeExecutionManagerWrapper.safeSLOAD" [ color = "orange" ];
  "OVM_DeployerWhitelist.isDeployerAllowed" -> "Lib_Bytes32Utils.toBool" [ color = "orange" ];
  "OVM_DeployerWhitelist.isDeployerAllowed" -> "Lib_SafeExecutionManagerWrapper.safeSLOAD" [ color = "orange" ];
  "OVM_DeployerWhitelist.isDeployerAllowed" -> "Lib_Bytes32Utils.toBool" [ color = "orange" ];
  "OVM_DeployerWhitelist.isDeployerAllowed" -> "Lib_SafeExecutionManagerWrapper.safeSLOAD" [ color = "orange" ];
  "OVM_DeployerWhitelist.isDeployerAllowed" -> "Lib_Bytes32Utils.fromAddress" [ color = "orange" ];
  "OVM_ChainStorageContainer.onlyOwner" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_ChainStorageContainer.setGlobalMetadata" -> "Lib_RingBuffer.RingBuffer.setExtraData" [ color = "orange" ];
  "OVM_ChainStorageContainer.getGlobalMetadata" -> "Lib_RingBuffer.RingBuffer.getExtraData" [ color = "orange" ];
  "OVM_ChainStorageContainer.length" -> "Lib_RingBuffer.RingBuffer.getLength" [ color = "orange" ];
  "OVM_ChainStorageContainer.push2" -> "Lib_RingBuffer.RingBuffer.push2" [ color = "orange" ];
  "OVM_ChainStorageContainer.push2" -> "Lib_RingBuffer.RingBuffer.push2" [ color = "orange" ];
  "OVM_ChainStorageContainer.get" -> "Lib_RingBuffer.RingBuffer.get" [ color = "orange" ];
  "OVM_ChainStorageContainer.deleteElementsAfterInclusive" -> "Lib_RingBuffer.RingBuffer.deleteElementsAfterInclusive" [ color = "orange" ];
  "OVM_ChainStorageContainer.deleteElementsAfterInclusive" -> "Lib_RingBuffer.RingBuffer.deleteElementsAfterInclusive" [ color = "orange" ];
  "Lib_RingBuffer.push" -> "RingBuffer.getContext" [ color = "orange" ];
  "Lib_RingBuffer.push" -> "RingBuffer.getBuffer" [ color = "orange" ];
  "Lib_RingBuffer.push" -> "RingBuffer.getBuffer" [ color = "orange" ];
  "Lib_RingBuffer.push" -> "RingBuffer.setContext" [ color = "orange" ];
  "Lib_RingBuffer.push" -> "RingBuffer.getContext" [ color = "orange" ];
  "Lib_RingBuffer.push2" -> "RingBuffer.getContext" [ color = "orange" ];
  "Lib_RingBuffer.push2" -> "RingBuffer.push2" [ color = "orange" ];
  "Lib_RingBuffer.get" -> "RingBuffer.getContext" [ color = "orange" ];
  "Lib_RingBuffer.get" -> "RingBuffer.getBuffer" [ color = "orange" ];
  "Lib_RingBuffer.get" -> "RingBuffer.getBuffer" [ color = "orange" ];
  "Lib_RingBuffer.deleteElementsAfterInclusive" -> "RingBuffer.getContext" [ color = "orange" ];
  "Lib_RingBuffer.deleteElementsAfterInclusive" -> "RingBuffer.getBuffer" [ color = "orange" ];
  "Lib_RingBuffer.deleteElementsAfterInclusive" -> "RingBuffer.getBuffer" [ color = "orange" ];
  "Lib_RingBuffer.deleteElementsAfterInclusive" -> "RingBuffer.setContext" [ color = "orange" ];
  "Lib_RingBuffer.deleteElementsAfterInclusive" -> "RingBuffer.getContext" [ color = "orange" ];
  "Lib_RingBuffer.deleteElementsAfterInclusive" -> "RingBuffer.deleteElementsAfterInclusive" [ color = "orange" ];
  "Lib_RingBuffer.getLength" -> "RingBuffer.getContext" [ color = "orange" ];
  "Lib_RingBuffer.setExtraData" -> "RingBuffer.getContext" [ color = "orange" ];
  "Lib_RingBuffer.setExtraData" -> "RingBuffer.setContext" [ color = "orange" ];
  "Lib_RingBuffer.getExtraData" -> "RingBuffer.getContext" [ color = "orange" ];
  "OVM_StateCommitmentChain.batches" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_StateCommitmentChain.getTotalElements" -> "OVM_StateCommitmentChain._getBatchExtraData" [ color = "green" ];
  "OVM_StateCommitmentChain.getTotalBatches" -> "OVM_StateCommitmentChain.batches" [ color = "green" ];
  "OVM_StateCommitmentChain.getLastSequencerTimestamp" -> "OVM_StateCommitmentChain._getBatchExtraData" [ color = "green" ];
  "OVM_StateCommitmentChain.appendStateBatch" -> "OVM_StateCommitmentChain.getTotalElements" [ color = "green" ];
  "OVM_StateCommitmentChain.appendStateBatch" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_StateCommitmentChain.appendStateBatch" -> "OVM_StateCommitmentChain.getTotalElements" [ color = "green" ];
  "OVM_StateCommitmentChain.appendStateBatch" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_StateCommitmentChain.appendStateBatch" -> "OVM_StateCommitmentChain._appendBatch" [ color = "green" ];
  "OVM_StateCommitmentChain.deleteStateBatch" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_StateCommitmentChain.deleteStateBatch" -> "OVM_StateCommitmentChain._isValidBatchHeader" [ color = "green" ];
  "OVM_StateCommitmentChain.deleteStateBatch" -> "iOVM_StateCommitmentChain.insideFraudProofWindow" [ color = "green" ];
  "OVM_StateCommitmentChain.deleteStateBatch" -> "OVM_StateCommitmentChain._deleteBatch" [ color = "green" ];
  "iOVM_StateCommitmentChain.verifyStateCommitment" -> "OVM_StateCommitmentChain._isValidBatchHeader" [ color = "green" ];
  "iOVM_StateCommitmentChain.verifyStateCommitment" -> "Lib_MerkleTree.verify" [ color = "orange" ];
  "iOVM_StateCommitmentChain.insideFraudProofWindow" -> "SafeMath.add" [ color = "orange" ];
  "OVM_StateCommitmentChain._getBatchExtraData" -> "OVM_StateCommitmentChain.batches" [ color = "green" ];
  "OVM_StateCommitmentChain._appendBatch" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_StateCommitmentChain._appendBatch" -> "OVM_StateCommitmentChain._getBatchExtraData" [ color = "green" ];
  "OVM_StateCommitmentChain._appendBatch" -> "Lib_OVMCodec.ChainBatchHeader" [ color = "orange" ];
  "OVM_StateCommitmentChain._appendBatch" -> "OVM_StateCommitmentChain.getTotalBatches" [ color = "green" ];
  "OVM_StateCommitmentChain._appendBatch" -> "Lib_MerkleTree.getMerkleRoot" [ color = "orange" ];
  "OVM_StateCommitmentChain._appendBatch" -> "OVM_StateCommitmentChain.batches" [ color = "green" ];
  "OVM_StateCommitmentChain._appendBatch" -> "Lib_OVMCodec.hashBatchHeader" [ color = "orange" ];
  "OVM_StateCommitmentChain._appendBatch" -> "OVM_StateCommitmentChain._makeBatchExtraData" [ color = "green" ];
  "OVM_StateCommitmentChain._deleteBatch" -> "OVM_StateCommitmentChain.batches" [ color = "green" ];
  "OVM_StateCommitmentChain._deleteBatch" -> "OVM_StateCommitmentChain._isValidBatchHeader" [ color = "green" ];
  "OVM_StateCommitmentChain._deleteBatch" -> "OVM_StateCommitmentChain.batches" [ color = "green" ];
  "OVM_StateCommitmentChain._deleteBatch" -> "OVM_StateCommitmentChain._makeBatchExtraData" [ color = "green" ];
  "OVM_StateCommitmentChain._isValidBatchHeader" -> "Lib_OVMCodec.hashBatchHeader" [ color = "orange" ];
  "OVM_StateCommitmentChain._isValidBatchHeader" -> "OVM_StateCommitmentChain.batches" [ color = "green" ];
  "SafeMath.sub" -> "SafeMath.sub" [ color = "green" ];
  "SafeMath.div" -> "SafeMath.div" [ color = "green" ];
  "SafeMath.mod" -> "SafeMath.mod" [ color = "green" ];
  "iOVM_StateManager.testAndSetAccountLoaded" -> "OVM_StateManager._testAndSetItemState" [ color = "green" ];
  "iOVM_StateManager.testAndSetAccountLoaded" -> "OVM_StateManager._getItemHash" [ color = "green" ];
  "iOVM_StateManager.testAndSetAccountChanged" -> "OVM_StateManager._testAndSetItemState" [ color = "green" ];
  "iOVM_StateManager.testAndSetAccountChanged" -> "OVM_StateManager._getItemHash" [ color = "green" ];
  "OVM_StateManager.commitAccount" -> "OVM_StateManager._getItemHash" [ color = "green" ];
  "OVM_StateManager.wasAccountChanged" -> "OVM_StateManager._getItemHash" [ color = "green" ];
  "OVM_StateManager.wasAccountCommitted" -> "OVM_StateManager._getItemHash" [ color = "green" ];
  "iOVM_StateManager.testAndSetContractStorageLoaded" -> "OVM_StateManager._testAndSetItemState" [ color = "green" ];
  "iOVM_StateManager.testAndSetContractStorageLoaded" -> "OVM_StateManager._getItemHash" [ color = "green" ];
  "iOVM_StateManager.testAndSetContractStorageChanged" -> "OVM_StateManager._testAndSetItemState" [ color = "green" ];
  "iOVM_StateManager.testAndSetContractStorageChanged" -> "OVM_StateManager._getItemHash" [ color = "green" ];
  "OVM_StateManager.commitContractStorage" -> "OVM_StateManager._getItemHash" [ color = "green" ];
  "OVM_StateManager.wasContractStorageChanged" -> "OVM_StateManager._getItemHash" [ color = "green" ];
  "OVM_StateManager.wasContractStorageCommitted" -> "OVM_StateManager._getItemHash" [ color = "green" ];
  "OVM_ProxySequencerEntrypoint.<Fallback>" -> "Lib_SafeExecutionManagerWrapper.safeDELEGATECALL" [ color = "orange" ];
  "OVM_ProxySequencerEntrypoint.<Fallback>" -> "OVM_ProxySequencerEntrypoint._getImplementation" [ color = "green" ];
  "OVM_ProxySequencerEntrypoint.init" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "OVM_ProxySequencerEntrypoint.init" -> "OVM_ProxySequencerEntrypoint._getOwner" [ color = "green" ];
  "OVM_ProxySequencerEntrypoint.init" -> "OVM_ProxySequencerEntrypoint._setOwner" [ color = "green" ];
  "OVM_ProxySequencerEntrypoint.init" -> "OVM_ProxySequencerEntrypoint._setImplementation" [ color = "green" ];
  "OVM_ProxySequencerEntrypoint.upgrade" -> "Lib_SafeExecutionManagerWrapper.safeREQUIRE" [ color = "orange" ];
  "OVM_ProxySequencerEntrypoint.upgrade" -> "OVM_ProxySequencerEntrypoint._getOwner" [ color = "green" ];
  "OVM_ProxySequencerEntrypoint.upgrade" -> "Lib_SafeExecutionManagerWrapper.safeCALLER" [ color = "orange" ];
  "OVM_ProxySequencerEntrypoint.upgrade" -> "OVM_ProxySequencerEntrypoint._setImplementation" [ color = "green" ];
  "OVM_ProxySequencerEntrypoint._setImplementation" -> "Lib_SafeExecutionManagerWrapper.safeSSTORE" [ color = "orange" ];
  "OVM_ProxySequencerEntrypoint._getImplementation" -> "Lib_SafeExecutionManagerWrapper.safeSLOAD" [ color = "orange" ];
  "OVM_ProxySequencerEntrypoint._setOwner" -> "Lib_SafeExecutionManagerWrapper.safeSSTORE" [ color = "orange" ];
  "OVM_ProxySequencerEntrypoint._getOwner" -> "Lib_SafeExecutionManagerWrapper.safeSLOAD" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "OVM_SequencerEntrypoint._getTransactionType" [ color = "green" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_BytesUtils.toUint8" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_BytesUtils.toBytes32" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_BytesUtils.toBytes32" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_BytesUtils.toUint8" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_BytesUtils.slice" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_OVMCodec.encodeEIP155Transaction" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_OVMCodec.decompressEIP155Transaction" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_ECDSAUtils.recover" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_SafeExecutionManagerWrapper.safeEXTCODESIZE" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_ECDSAUtils.getMessageHash" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_SafeExecutionManagerWrapper.safeCREATEEOA" [ color = "orange" ];
  "OVM_SequencerEntrypoint.<Fallback>" -> "Lib_SafeExecutionManagerWrapper.safeCALL" [ color = "orange" ];
  "OVM_SequencerEntrypoint._getTransactionType" -> "Lib_SafeExecutionManagerWrapper.safeREVERT" [ color = "orange" ];
  "OVM_BondManager.recordGasSpent" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_BondManager.finalize" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_BondManager.deposit" -> "ERC20.transferFrom" [ color = "orange" ];
  "OVM_BondManager.finalizeWithdrawal" -> "ERC20.transfer" [ color = "orange" ];
  "OVM_BondManager.claim" -> "ERC20.transfer" [ color = "orange" ];
  "OVM_FraudContributor.contributesToFraudProof" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_FraudVerifier.initializeFraudVerification" -> "Lib_OVMCodec.hashTransaction" [ color = "orange" ];
  "OVM_FraudVerifier.initializeFraudVerification" -> "OVM_FraudVerifier._hasStateTransitioner" [ color = "green" ];
  "OVM_FraudVerifier.initializeFraudVerification" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_FraudVerifier.initializeFraudVerification" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_FraudVerifier.initializeFraudVerification" -> "iOVM_StateCommitmentChain.verifyStateCommitment" [ color = "orange" ];
  "OVM_FraudVerifier.initializeFraudVerification" -> "iOVM_CanonicalTransactionChain.verifyTransaction" [ color = "orange" ];
  "OVM_FraudVerifier.initializeFraudVerification" -> "OVM_FraudVerifier._deployTransitioner" [ color = "green" ];
  "OVM_FraudVerifier.initializeFraudVerification" -> "Lib_OVMCodec.hashTransaction" [ color = "orange" ];
  "OVM_FraudVerifier.finalizeFraudVerification" -> "OVM_FraudVerifier.getStateTransitioner" [ color = "green" ];
  "OVM_FraudVerifier.finalizeFraudVerification" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_FraudVerifier.finalizeFraudVerification" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_FraudVerifier.finalizeFraudVerification" -> "iOVM_StateTransitioner.isComplete" [ color = "orange" ];
  "OVM_FraudVerifier.finalizeFraudVerification" -> "iOVM_StateCommitmentChain.verifyStateCommitment" [ color = "orange" ];
  "OVM_FraudVerifier.finalizeFraudVerification" -> "iOVM_StateCommitmentChain.verifyStateCommitment" [ color = "orange" ];
  "OVM_FraudVerifier.finalizeFraudVerification" -> "iOVM_StateTransitioner.getPostStateRoot" [ color = "orange" ];
  "OVM_FraudVerifier.finalizeFraudVerification" -> "OVM_FraudVerifier._cancelStateTransition" [ color = "green" ];
  "OVM_FraudVerifier._hasStateTransitioner" -> "OVM_FraudVerifier.getStateTransitioner" [ color = "green" ];
  "OVM_FraudVerifier._deployTransitioner" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_FraudVerifier._cancelStateTransition" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_FraudVerifier._cancelStateTransition" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_FraudVerifier._cancelStateTransition" -> "iOVM_StateCommitmentChain.deleteStateBatch" [ color = "orange" ];
  "OVM_FraudVerifier._cancelStateTransition" -> "iOVM_BondManager.finalize" [ color = "orange" ];
  "OVM_StateTransitioner.<Constructor>" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_StateTransitioner.proveContractState" -> "iOVM_StateManager.hasAccount" [ color = "orange" ];
  "OVM_StateTransitioner.proveContractState" -> "iOVM_StateManager.hasEmptyAccount" [ color = "orange" ];
  "OVM_StateTransitioner.proveContractState" -> "Lib_SecureMerkleTrie.get" [ color = "orange" ];
  "OVM_StateTransitioner.proveContractState" -> "Lib_OVMCodec.decodeEVMAccount" [ color = "orange" ];
  "OVM_StateTransitioner.proveContractState" -> "Lib_EthUtils.getCodeHash" [ color = "orange" ];
  "OVM_StateTransitioner.proveContractState" -> "iOVM_StateManager.putAccount" [ color = "orange" ];
  "OVM_StateTransitioner.proveContractState" -> "Lib_OVMCodec.Account" [ color = "orange" ];
  "OVM_StateTransitioner.proveContractState" -> "iOVM_StateManager.putEmptyAccount" [ color = "orange" ];
  "OVM_StateTransitioner.proveStorageSlot" -> "iOVM_StateManager.hasContractStorage" [ color = "orange" ];
  "OVM_StateTransitioner.proveStorageSlot" -> "iOVM_StateManager.hasAccount" [ color = "orange" ];
  "OVM_StateTransitioner.proveStorageSlot" -> "iOVM_StateManager.getAccountStorageRoot" [ color = "orange" ];
  "OVM_StateTransitioner.proveStorageSlot" -> "Lib_SecureMerkleTrie.get" [ color = "orange" ];
  "OVM_StateTransitioner.proveStorageSlot" -> "Lib_BytesUtils.toBytes32PadLeft" [ color = "orange" ];
  "OVM_StateTransitioner.proveStorageSlot" -> "Lib_RLPReader.readBytes" [ color = "orange" ];
  "OVM_StateTransitioner.proveStorageSlot" -> "iOVM_StateManager.putContractStorage" [ color = "orange" ];
  "OVM_StateTransitioner.applyTransaction" -> "Lib_OVMCodec.hashTransaction" [ color = "orange" ];
  "OVM_StateTransitioner.applyTransaction" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "OVM_StateTransitioner.applyTransaction" -> "iOVM_StateManager.setExecutionManager" [ color = "orange" ];
  "OVM_StateTransitioner.applyTransaction" -> "iOVM_ExecutionManager.run" [ color = "orange" ];
  "OVM_StateTransitioner.commitContractState" -> "iOVM_StateManager.getTotalUncommittedContractStorage" [ color = "orange" ];
  "OVM_StateTransitioner.commitContractState" -> "iOVM_StateManager.commitAccount" [ color = "orange" ];
  "OVM_StateTransitioner.commitContractState" -> "iOVM_StateManager.getAccount" [ color = "orange" ];
  "OVM_StateTransitioner.commitContractState" -> "Lib_SecureMerkleTrie.update" [ color = "orange" ];
  "OVM_StateTransitioner.commitContractState" -> "Lib_OVMCodec.encodeEVMAccount" [ color = "orange" ];
  "OVM_StateTransitioner.commitContractState" -> "Lib_OVMCodec.toEVMAccount" [ color = "orange" ];
  "OVM_StateTransitioner.commitStorageSlot" -> "iOVM_StateManager.commitContractStorage" [ color = "orange" ];
  "OVM_StateTransitioner.commitStorageSlot" -> "iOVM_StateManager.getAccount" [ color = "orange" ];
  "OVM_StateTransitioner.commitStorageSlot" -> "iOVM_StateManager.getContractStorage" [ color = "orange" ];
  "OVM_StateTransitioner.commitStorageSlot" -> "Lib_SecureMerkleTrie.update" [ color = "orange" ];
  "OVM_StateTransitioner.commitStorageSlot" -> "Lib_RLPWriter.writeBytes" [ color = "orange" ];
  "OVM_StateTransitioner.commitStorageSlot" -> "Lib_Bytes32Utils.removeLeadingZeros" [ color = "orange" ];
  "OVM_StateTransitioner.commitStorageSlot" -> "iOVM_StateManager.putAccount" [ color = "orange" ];
  "OVM_StateTransitioner.completeTransition" -> "iOVM_StateManager.getTotalUncommittedAccounts" [ color = "orange" ];
  "OVM_StateTransitioner.completeTransition" -> "iOVM_StateManager.getTotalUncommittedContractStorage" [ color = "orange" ];
  "OVM_StateTransitionerFactory.create" -> "Lib_AddressResolver.resolve" [ color = "green" ];
  "Lib_ResolvedDelegateProxy.<Fallback>" -> "target.delegatecall" [ color = "orange" ];


rankdir=LR
node [shape=plaintext]
subgraph cluster_01 { 
label = "Legend";
key [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td align="right" port="i1">Internal Call</td></tr>
  <tr><td align="right" port="i2">External Call</td></tr>
  <tr><td align="right" port="i3">Defined Contract</td></tr>
  <tr><td align="right" port="i4">Undefined Contract</td></tr>
  </table>>]
key2 [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0">
  <tr><td port="i1">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i2">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i3" bgcolor="lightgray">&nbsp;&nbsp;&nbsp;</td></tr>
  <tr><td port="i4">
    <table border="1" cellborder="0" cellspacing="0" cellpadding="7" color="lightgray">
      <tr>
       <td></td>
      </tr>
     </table>
  </td></tr>
  </table>>]
key:i1:e -> key2:i1:w [color="green"]
key:i2:e -> key2:i2:w [color="orange"]
}
}

